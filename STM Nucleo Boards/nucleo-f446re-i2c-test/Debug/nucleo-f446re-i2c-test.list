
nucleo-f446re-i2c-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800468c  0800468c  0000568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046fc  080046fc  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080046fc  080046fc  000056fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004704  08004704  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004704  08004704  00005704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004708  08004708  00005708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800470c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  08004768  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08004768  00006264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a881  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001841  00000000  00000000  0001090d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  00012150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000774  00000000  00000000  00012ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215c1  00000000  00000000  00013244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce4c  00000000  00000000  00034805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caec1  00000000  00000000  00041651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c512  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d8c  00000000  00000000  0010c558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0010f2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004674 	.word	0x08004674

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004674 	.word	0x08004674

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2f>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000894:	bf24      	itt	cs
 8000896:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800089a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800089e:	d90d      	bls.n	80008bc <__aeabi_d2f+0x30>
 80008a0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008ac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b4:	bf08      	it	eq
 80008b6:	f020 0001 	biceq.w	r0, r0, #1
 80008ba:	4770      	bx	lr
 80008bc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008c0:	d121      	bne.n	8000906 <__aeabi_d2f+0x7a>
 80008c2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008c6:	bfbc      	itt	lt
 80008c8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008cc:	4770      	bxlt	lr
 80008ce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008d6:	f1c2 0218 	rsb	r2, r2, #24
 80008da:	f1c2 0c20 	rsb	ip, r2, #32
 80008de:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e2:	fa20 f002 	lsr.w	r0, r0, r2
 80008e6:	bf18      	it	ne
 80008e8:	f040 0001 	orrne.w	r0, r0, #1
 80008ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008f8:	ea40 000c 	orr.w	r0, r0, ip
 80008fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000900:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000904:	e7cc      	b.n	80008a0 <__aeabi_d2f+0x14>
 8000906:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090a:	d107      	bne.n	800091c <__aeabi_d2f+0x90>
 800090c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000910:	bf1e      	ittt	ne
 8000912:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000916:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800091a:	4770      	bxne	lr
 800091c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000920:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000924:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295
 800093c:	f04f 30ff 	movne.w	r0, #4294967295
 8000940:	f000 b988 	b.w	8000c54 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	468e      	mov	lr, r1
 8000964:	4604      	mov	r4, r0
 8000966:	4688      	mov	r8, r1
 8000968:	2b00      	cmp	r3, #0
 800096a:	d14a      	bne.n	8000a02 <__udivmoddi4+0xa6>
 800096c:	428a      	cmp	r2, r1
 800096e:	4617      	mov	r7, r2
 8000970:	d962      	bls.n	8000a38 <__udivmoddi4+0xdc>
 8000972:	fab2 f682 	clz	r6, r2
 8000976:	b14e      	cbz	r6, 800098c <__udivmoddi4+0x30>
 8000978:	f1c6 0320 	rsb	r3, r6, #32
 800097c:	fa01 f806 	lsl.w	r8, r1, r6
 8000980:	fa20 f303 	lsr.w	r3, r0, r3
 8000984:	40b7      	lsls	r7, r6
 8000986:	ea43 0808 	orr.w	r8, r3, r8
 800098a:	40b4      	lsls	r4, r6
 800098c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000990:	fa1f fc87 	uxth.w	ip, r7
 8000994:	fbb8 f1fe 	udiv	r1, r8, lr
 8000998:	0c23      	lsrs	r3, r4, #16
 800099a:	fb0e 8811 	mls	r8, lr, r1, r8
 800099e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a2:	fb01 f20c 	mul.w	r2, r1, ip
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d909      	bls.n	80009be <__udivmoddi4+0x62>
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	f101 30ff 	add.w	r0, r1, #4294967295
 80009b0:	f080 80ea 	bcs.w	8000b88 <__udivmoddi4+0x22c>
 80009b4:	429a      	cmp	r2, r3
 80009b6:	f240 80e7 	bls.w	8000b88 <__udivmoddi4+0x22c>
 80009ba:	3902      	subs	r1, #2
 80009bc:	443b      	add	r3, r7
 80009be:	1a9a      	subs	r2, r3, r2
 80009c0:	b2a3      	uxth	r3, r4
 80009c2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009c6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80009d2:	459c      	cmp	ip, r3
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x8e>
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	f100 32ff 	add.w	r2, r0, #4294967295
 80009dc:	f080 80d6 	bcs.w	8000b8c <__udivmoddi4+0x230>
 80009e0:	459c      	cmp	ip, r3
 80009e2:	f240 80d3 	bls.w	8000b8c <__udivmoddi4+0x230>
 80009e6:	443b      	add	r3, r7
 80009e8:	3802      	subs	r0, #2
 80009ea:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009ee:	eba3 030c 	sub.w	r3, r3, ip
 80009f2:	2100      	movs	r1, #0
 80009f4:	b11d      	cbz	r5, 80009fe <__udivmoddi4+0xa2>
 80009f6:	40f3      	lsrs	r3, r6
 80009f8:	2200      	movs	r2, #0
 80009fa:	e9c5 3200 	strd	r3, r2, [r5]
 80009fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d905      	bls.n	8000a12 <__udivmoddi4+0xb6>
 8000a06:	b10d      	cbz	r5, 8000a0c <__udivmoddi4+0xb0>
 8000a08:	e9c5 0100 	strd	r0, r1, [r5]
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4608      	mov	r0, r1
 8000a10:	e7f5      	b.n	80009fe <__udivmoddi4+0xa2>
 8000a12:	fab3 f183 	clz	r1, r3
 8000a16:	2900      	cmp	r1, #0
 8000a18:	d146      	bne.n	8000aa8 <__udivmoddi4+0x14c>
 8000a1a:	4573      	cmp	r3, lr
 8000a1c:	d302      	bcc.n	8000a24 <__udivmoddi4+0xc8>
 8000a1e:	4282      	cmp	r2, r0
 8000a20:	f200 8105 	bhi.w	8000c2e <__udivmoddi4+0x2d2>
 8000a24:	1a84      	subs	r4, r0, r2
 8000a26:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	4690      	mov	r8, r2
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d0e5      	beq.n	80009fe <__udivmoddi4+0xa2>
 8000a32:	e9c5 4800 	strd	r4, r8, [r5]
 8000a36:	e7e2      	b.n	80009fe <__udivmoddi4+0xa2>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	f000 8090 	beq.w	8000b5e <__udivmoddi4+0x202>
 8000a3e:	fab2 f682 	clz	r6, r2
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	f040 80a4 	bne.w	8000b90 <__udivmoddi4+0x234>
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	0c03      	lsrs	r3, r0, #16
 8000a4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a50:	b280      	uxth	r0, r0
 8000a52:	b2bc      	uxth	r4, r7
 8000a54:	2101      	movs	r1, #1
 8000a56:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a5a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a62:	fb04 f20c 	mul.w	r2, r4, ip
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d907      	bls.n	8000a7a <__udivmoddi4+0x11e>
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a70:	d202      	bcs.n	8000a78 <__udivmoddi4+0x11c>
 8000a72:	429a      	cmp	r2, r3
 8000a74:	f200 80e0 	bhi.w	8000c38 <__udivmoddi4+0x2dc>
 8000a78:	46c4      	mov	ip, r8
 8000a7a:	1a9b      	subs	r3, r3, r2
 8000a7c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a80:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a84:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a88:	fb02 f404 	mul.w	r4, r2, r4
 8000a8c:	429c      	cmp	r4, r3
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0x144>
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a96:	d202      	bcs.n	8000a9e <__udivmoddi4+0x142>
 8000a98:	429c      	cmp	r4, r3
 8000a9a:	f200 80ca 	bhi.w	8000c32 <__udivmoddi4+0x2d6>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	1b1b      	subs	r3, r3, r4
 8000aa2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000aa6:	e7a5      	b.n	80009f4 <__udivmoddi4+0x98>
 8000aa8:	f1c1 0620 	rsb	r6, r1, #32
 8000aac:	408b      	lsls	r3, r1
 8000aae:	fa22 f706 	lsr.w	r7, r2, r6
 8000ab2:	431f      	orrs	r7, r3
 8000ab4:	fa0e f401 	lsl.w	r4, lr, r1
 8000ab8:	fa20 f306 	lsr.w	r3, r0, r6
 8000abc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ac0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ac4:	4323      	orrs	r3, r4
 8000ac6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aca:	fa1f fc87 	uxth.w	ip, r7
 8000ace:	fbbe f0f9 	udiv	r0, lr, r9
 8000ad2:	0c1c      	lsrs	r4, r3, #16
 8000ad4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ad8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000adc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x1a0>
 8000ae8:	193c      	adds	r4, r7, r4
 8000aea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000aee:	f080 809c 	bcs.w	8000c2a <__udivmoddi4+0x2ce>
 8000af2:	45a6      	cmp	lr, r4
 8000af4:	f240 8099 	bls.w	8000c2a <__udivmoddi4+0x2ce>
 8000af8:	3802      	subs	r0, #2
 8000afa:	443c      	add	r4, r7
 8000afc:	eba4 040e 	sub.w	r4, r4, lr
 8000b00:	fa1f fe83 	uxth.w	lr, r3
 8000b04:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b08:	fb09 4413 	mls	r4, r9, r3, r4
 8000b0c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b10:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b14:	45a4      	cmp	ip, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x1ce>
 8000b18:	193c      	adds	r4, r7, r4
 8000b1a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b1e:	f080 8082 	bcs.w	8000c26 <__udivmoddi4+0x2ca>
 8000b22:	45a4      	cmp	ip, r4
 8000b24:	d97f      	bls.n	8000c26 <__udivmoddi4+0x2ca>
 8000b26:	3b02      	subs	r3, #2
 8000b28:	443c      	add	r4, r7
 8000b2a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b2e:	eba4 040c 	sub.w	r4, r4, ip
 8000b32:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b36:	4564      	cmp	r4, ip
 8000b38:	4673      	mov	r3, lr
 8000b3a:	46e1      	mov	r9, ip
 8000b3c:	d362      	bcc.n	8000c04 <__udivmoddi4+0x2a8>
 8000b3e:	d05f      	beq.n	8000c00 <__udivmoddi4+0x2a4>
 8000b40:	b15d      	cbz	r5, 8000b5a <__udivmoddi4+0x1fe>
 8000b42:	ebb8 0203 	subs.w	r2, r8, r3
 8000b46:	eb64 0409 	sbc.w	r4, r4, r9
 8000b4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000b4e:	fa22 f301 	lsr.w	r3, r2, r1
 8000b52:	431e      	orrs	r6, r3
 8000b54:	40cc      	lsrs	r4, r1
 8000b56:	e9c5 6400 	strd	r6, r4, [r5]
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	e74f      	b.n	80009fe <__udivmoddi4+0xa2>
 8000b5e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b62:	0c01      	lsrs	r1, r0, #16
 8000b64:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4638      	mov	r0, r7
 8000b72:	463c      	mov	r4, r7
 8000b74:	46b8      	mov	r8, r7
 8000b76:	46be      	mov	lr, r7
 8000b78:	2620      	movs	r6, #32
 8000b7a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b7e:	eba2 0208 	sub.w	r2, r2, r8
 8000b82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b86:	e766      	b.n	8000a56 <__udivmoddi4+0xfa>
 8000b88:	4601      	mov	r1, r0
 8000b8a:	e718      	b.n	80009be <__udivmoddi4+0x62>
 8000b8c:	4610      	mov	r0, r2
 8000b8e:	e72c      	b.n	80009ea <__udivmoddi4+0x8e>
 8000b90:	f1c6 0220 	rsb	r2, r6, #32
 8000b94:	fa2e f302 	lsr.w	r3, lr, r2
 8000b98:	40b7      	lsls	r7, r6
 8000b9a:	40b1      	lsls	r1, r6
 8000b9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000baa:	b2bc      	uxth	r4, r7
 8000bac:	fb0e 3318 	mls	r3, lr, r8, r3
 8000bb0:	0c11      	lsrs	r1, r2, #16
 8000bb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb6:	fb08 f904 	mul.w	r9, r8, r4
 8000bba:	40b0      	lsls	r0, r6
 8000bbc:	4589      	cmp	r9, r1
 8000bbe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000bc2:	b280      	uxth	r0, r0
 8000bc4:	d93e      	bls.n	8000c44 <__udivmoddi4+0x2e8>
 8000bc6:	1879      	adds	r1, r7, r1
 8000bc8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000bcc:	d201      	bcs.n	8000bd2 <__udivmoddi4+0x276>
 8000bce:	4589      	cmp	r9, r1
 8000bd0:	d81f      	bhi.n	8000c12 <__udivmoddi4+0x2b6>
 8000bd2:	eba1 0109 	sub.w	r1, r1, r9
 8000bd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bda:	fb09 f804 	mul.w	r8, r9, r4
 8000bde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000be2:	b292      	uxth	r2, r2
 8000be4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000be8:	4542      	cmp	r2, r8
 8000bea:	d229      	bcs.n	8000c40 <__udivmoddi4+0x2e4>
 8000bec:	18ba      	adds	r2, r7, r2
 8000bee:	f109 31ff 	add.w	r1, r9, #4294967295
 8000bf2:	d2c4      	bcs.n	8000b7e <__udivmoddi4+0x222>
 8000bf4:	4542      	cmp	r2, r8
 8000bf6:	d2c2      	bcs.n	8000b7e <__udivmoddi4+0x222>
 8000bf8:	f1a9 0102 	sub.w	r1, r9, #2
 8000bfc:	443a      	add	r2, r7
 8000bfe:	e7be      	b.n	8000b7e <__udivmoddi4+0x222>
 8000c00:	45f0      	cmp	r8, lr
 8000c02:	d29d      	bcs.n	8000b40 <__udivmoddi4+0x1e4>
 8000c04:	ebbe 0302 	subs.w	r3, lr, r2
 8000c08:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c0c:	3801      	subs	r0, #1
 8000c0e:	46e1      	mov	r9, ip
 8000c10:	e796      	b.n	8000b40 <__udivmoddi4+0x1e4>
 8000c12:	eba7 0909 	sub.w	r9, r7, r9
 8000c16:	4449      	add	r1, r9
 8000c18:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c1c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c20:	fb09 f804 	mul.w	r8, r9, r4
 8000c24:	e7db      	b.n	8000bde <__udivmoddi4+0x282>
 8000c26:	4673      	mov	r3, lr
 8000c28:	e77f      	b.n	8000b2a <__udivmoddi4+0x1ce>
 8000c2a:	4650      	mov	r0, sl
 8000c2c:	e766      	b.n	8000afc <__udivmoddi4+0x1a0>
 8000c2e:	4608      	mov	r0, r1
 8000c30:	e6fd      	b.n	8000a2e <__udivmoddi4+0xd2>
 8000c32:	443b      	add	r3, r7
 8000c34:	3a02      	subs	r2, #2
 8000c36:	e733      	b.n	8000aa0 <__udivmoddi4+0x144>
 8000c38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c3c:	443b      	add	r3, r7
 8000c3e:	e71c      	b.n	8000a7a <__udivmoddi4+0x11e>
 8000c40:	4649      	mov	r1, r9
 8000c42:	e79c      	b.n	8000b7e <__udivmoddi4+0x222>
 8000c44:	eba1 0109 	sub.w	r1, r1, r9
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c4e:	fb09 f804 	mul.w	r8, r9, r4
 8000c52:	e7c4      	b.n	8000bde <__udivmoddi4+0x282>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5e:	f000 fb3d 	bl	80012dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c62:	f000 f8a7 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c66:	f000 f96b 	bl	8000f40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c6a:	f000 f93f 	bl	8000eec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c6e:	f000 f90f 	bl	8000e90 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */
	// Tell
    // Set first byte of the buffer to the location of TMP102's temperature register
	buf[0] = REG_TEMP;
 8000c72:	2300      	movs	r3, #0
 8000c74:	713b      	strb	r3, [r7, #4]
	return_value = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY); // 1 byte of data is sent
 8000c76:	2390      	movs	r3, #144	@ 0x90
 8000c78:	4619      	mov	r1, r3
 8000c7a:	1d3a      	adds	r2, r7, #4
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2301      	movs	r3, #1
 8000c84:	4843      	ldr	r0, [pc, #268]	@ (8000d94 <main+0x13c>)
 8000c86:	f000 ff97 	bl	8001bb8 <HAL_I2C_Master_Transmit>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	757b      	strb	r3, [r7, #21]
	if (return_value != HAL_OK) {
 8000c8e:	7d7b      	ldrb	r3, [r7, #21]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d008      	beq.n	8000ca6 <main+0x4e>
		strcpy((char*)buf, "Error Tx\r\n"); // transmit error, replacing the garbage data with error message
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4a40      	ldr	r2, [pc, #256]	@ (8000d98 <main+0x140>)
 8000c98:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c9a:	c303      	stmia	r3!, {r0, r1}
 8000c9c:	801a      	strh	r2, [r3, #0]
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	0c12      	lsrs	r2, r2, #16
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e065      	b.n	8000d72 <main+0x11a>
	} else {
		// read 2 bytes from temperature register
		return_value = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 8000ca6:	2390      	movs	r3, #144	@ 0x90
 8000ca8:	4619      	mov	r1, r3
 8000caa:	1d3a      	adds	r2, r7, #4
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	4837      	ldr	r0, [pc, #220]	@ (8000d94 <main+0x13c>)
 8000cb6:	f001 f87d 	bl	8001db4 <HAL_I2C_Master_Receive>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	757b      	strb	r3, [r7, #21]
		if (return_value != HAL_OK) {
 8000cbe:	7d7b      	ldrb	r3, [r7, #21]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d008      	beq.n	8000cd6 <main+0x7e>
			strcpy((char*)buf, "Error Rx\r\n"); // receive error
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4a35      	ldr	r2, [pc, #212]	@ (8000d9c <main+0x144>)
 8000cc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cca:	c303      	stmia	r3!, {r0, r1}
 8000ccc:	801a      	strh	r2, [r3, #0]
 8000cce:	3302      	adds	r3, #2
 8000cd0:	0c12      	lsrs	r2, r2, #16
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e04d      	b.n	8000d72 <main+0x11a>
		} else {
			// combine the bytes
			val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8000cd6:	793b      	ldrb	r3, [r7, #4]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	797b      	ldrb	r3, [r7, #5]
 8000ce0:	091b      	lsrs	r3, r3, #4
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	b21b      	sxth	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	82fb      	strh	r3, [r7, #22]

			// convert to 2's complement, temperature can be negative
			if (val > 0x7FF) {
 8000cea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000cf2:	db05      	blt.n	8000d00 <main+0xa8>
				val |= 0xF000;
 8000cf4:	8afb      	ldrh	r3, [r7, #22]
 8000cf6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000cfa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000cfe:	82fb      	strh	r3, [r7, #22]
			}

			// convert to float temperature value
			temp_c = val * 0.0625;
 8000d00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fd57 	bl	80007b8 <__aeabi_i2d>
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	4b24      	ldr	r3, [pc, #144]	@ (8000da0 <main+0x148>)
 8000d10:	f7ff fad6 	bl	80002c0 <__aeabi_dmul>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff fdb6 	bl	800088c <__aeabi_d2f>
 8000d20:	4603      	mov	r3, r0
 8000d22:	613b      	str	r3, [r7, #16]

			// convert temperature to decimal format
			temp_c *= 100;
 8000d24:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d28:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000da4 <main+0x14c>
 8000d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d30:	edc7 7a04 	vstr	s15, [r7, #16]
			snprintf((char*)buf, 100,
					"%u.%02u C\r\n",
					((unsigned int) temp_c / 100),
 8000d34:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d3c:	ee17 2a90 	vmov	r2, s15
			snprintf((char*)buf, 100,
 8000d40:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <main+0x150>)
 8000d42:	fba3 2302 	umull	r2, r3, r3, r2
 8000d46:	095a      	lsrs	r2, r3, #5
					((unsigned int) temp_c % 100));
 8000d48:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d50:	ee17 1a90 	vmov	r1, s15
			snprintf((char*)buf, 100,
 8000d54:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <main+0x150>)
 8000d56:	fba3 0301 	umull	r0, r3, r3, r1
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2064      	movs	r0, #100	@ 0x64
 8000d5e:	fb00 f303 	mul.w	r3, r0, r3
 8000d62:	1acb      	subs	r3, r1, r3
 8000d64:	1d38      	adds	r0, r7, #4
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	4a10      	ldr	r2, [pc, #64]	@ (8000dac <main+0x154>)
 8000d6c:	2164      	movs	r1, #100	@ 0x64
 8000d6e:	f002 ffcd 	bl	8003d0c <sniprintf>
	}
	// Printing Hello! on UART --- see in the Putty COM port
	//strcpy((char*)buf, "Hello!\r\n");

	// Send out buffer to UART (temperature or error message)
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fa4b 	bl	8000210 <strlen>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	1d39      	adds	r1, r7, #4
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	480a      	ldr	r0, [pc, #40]	@ (8000db0 <main+0x158>)
 8000d86:	f002 fc05 	bl	8003594 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000d8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d8e:	f000 fb17 	bl	80013c0 <HAL_Delay>
	buf[0] = REG_TEMP;
 8000d92:	e76e      	b.n	8000c72 <main+0x1a>
 8000d94:	20000078 	.word	0x20000078
 8000d98:	0800468c 	.word	0x0800468c
 8000d9c:	08004698 	.word	0x08004698
 8000da0:	3fb00000 	.word	0x3fb00000
 8000da4:	42c80000 	.word	0x42c80000
 8000da8:	51eb851f 	.word	0x51eb851f
 8000dac:	080046a4 	.word	0x080046a4
 8000db0:	200000cc 	.word	0x200000cc

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b094      	sub	sp, #80	@ 0x50
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	2234      	movs	r2, #52	@ 0x34
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 ffd8 	bl	8003d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8000e88 <SystemClock_Config+0xd4>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	4a29      	ldr	r2, [pc, #164]	@ (8000e88 <SystemClock_Config+0xd4>)
 8000de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de8:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <SystemClock_Config+0xd4>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000df4:	2300      	movs	r3, #0
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <SystemClock_Config+0xd8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e00:	4a22      	ldr	r2, [pc, #136]	@ (8000e8c <SystemClock_Config+0xd8>)
 8000e02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <SystemClock_Config+0xd8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e20:	2302      	movs	r3, #2
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e24:	2300      	movs	r3, #0
 8000e26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e28:	2310      	movs	r3, #16
 8000e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e2c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e32:	2304      	movs	r3, #4
 8000e34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 f8b8 	bl	8002fb8 <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e4e:	f000 f8e5 	bl	800101c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	230f      	movs	r3, #15
 8000e54:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2302      	movs	r3, #2
 8000e58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fd58 	bl	8002924 <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e7a:	f000 f8cf 	bl	800101c <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3750      	adds	r7, #80	@ 0x50
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40007000 	.word	0x40007000

08000e90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000e96:	4a13      	ldr	r2, [pc, #76]	@ (8000ee4 <MX_I2C1_Init+0x54>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000e9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <MX_I2C1_Init+0x58>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000eae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000ece:	f000 fd2f 	bl	8001930 <HAL_I2C_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ed8:	f000 f8a0 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000078 	.word	0x20000078
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	000186a0 	.word	0x000186a0

08000eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <MX_USART2_UART_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f24:	f002 fae6 	bl	80034f4 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f2e:	f000 f875 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000cc 	.word	0x200000cc
 8000f3c:	40004400 	.word	0x40004400

08000f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a25      	ldr	r2, [pc, #148]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a1e      	ldr	r2, [pc, #120]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a17      	ldr	r2, [pc, #92]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2120      	movs	r1, #32
 8000fca:	4812      	ldr	r0, [pc, #72]	@ (8001014 <MX_GPIO_Init+0xd4>)
 8000fcc:	f000 fc96 	bl	80018fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480c      	ldr	r0, [pc, #48]	@ (8001018 <MX_GPIO_Init+0xd8>)
 8000fe8:	f000 faf4 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fec:	2320      	movs	r3, #32
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_GPIO_Init+0xd4>)
 8001004:	f000 fae6 	bl	80015d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	@ 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020800 	.word	0x40020800

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <Error_Handler+0x8>

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <HAL_MspInit+0x4c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	4a0f      	ldr	r2, [pc, #60]	@ (8001074 <HAL_MspInit+0x4c>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103c:	6453      	str	r3, [r2, #68]	@ 0x44
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_MspInit+0x4c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <HAL_MspInit+0x4c>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001058:	6413      	str	r3, [r2, #64]	@ 0x40
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001066:	2007      	movs	r0, #7
 8001068:	f000 fa80 	bl	800156c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800

08001078 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a19      	ldr	r2, [pc, #100]	@ (80010fc <HAL_I2C_MspInit+0x84>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12c      	bne.n	80010f4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <HAL_I2C_MspInit+0x88>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <HAL_I2C_MspInit+0x88>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <HAL_I2C_MspInit+0x88>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010bc:	2312      	movs	r3, #18
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c8:	2304      	movs	r3, #4
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	480c      	ldr	r0, [pc, #48]	@ (8001104 <HAL_I2C_MspInit+0x8c>)
 80010d4:	f000 fa7e 	bl	80015d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HAL_I2C_MspInit+0x88>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	4a07      	ldr	r2, [pc, #28]	@ (8001100 <HAL_I2C_MspInit+0x88>)
 80010e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <HAL_I2C_MspInit+0x88>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	@ 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40005400 	.word	0x40005400
 8001100:	40023800 	.word	0x40023800
 8001104:	40020400 	.word	0x40020400

08001108 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a19      	ldr	r2, [pc, #100]	@ (800118c <HAL_UART_MspInit+0x84>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12b      	bne.n	8001182 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_UART_MspInit+0x88>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	4a17      	ldr	r2, [pc, #92]	@ (8001190 <HAL_UART_MspInit+0x88>)
 8001134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001138:	6413      	str	r3, [r2, #64]	@ 0x40
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <HAL_UART_MspInit+0x88>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <HAL_UART_MspInit+0x88>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a10      	ldr	r2, [pc, #64]	@ (8001190 <HAL_UART_MspInit+0x88>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <HAL_UART_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001162:	230c      	movs	r3, #12
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001172:	2307      	movs	r3, #7
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <HAL_UART_MspInit+0x8c>)
 800117e:	f000 fa29 	bl	80015d4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	@ 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40004400 	.word	0x40004400
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <NMI_Handler+0x4>

080011a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <MemManage_Handler+0x4>

080011b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <UsageFault_Handler+0x4>

080011c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ee:	f000 f8c7 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001200:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <_sbrk+0x5c>)
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <_sbrk+0x60>)
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <_sbrk+0x64>)
 8001216:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <_sbrk+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	d207      	bcs.n	8001238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001228:	f002 fdae 	bl	8003d88 <__errno>
 800122c:	4603      	mov	r3, r0
 800122e:	220c      	movs	r2, #12
 8001230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e009      	b.n	800124c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123e:	4b07      	ldr	r3, [pc, #28]	@ (800125c <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	4a05      	ldr	r2, [pc, #20]	@ (800125c <_sbrk+0x64>)
 8001248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20020000 	.word	0x20020000
 8001258:	00000400 	.word	0x00000400
 800125c:	20000114 	.word	0x20000114
 8001260:	20000268 	.word	0x20000268

08001264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <SystemInit+0x20>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <SystemInit+0x20>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800128c:	f7ff ffea 	bl	8001264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001292:	490d      	ldr	r1, [pc, #52]	@ (80012c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a8:	4c0a      	ldr	r4, [pc, #40]	@ (80012d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f002 fd6d 	bl	8003d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff fccd 	bl	8000c58 <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012cc:	0800470c 	.word	0x0800470c
  ldr r2, =_sbss
 80012d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012d4:	20000264 	.word	0x20000264

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>
	...

080012dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <HAL_Init+0x40>)
 80012e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0a      	ldr	r2, [pc, #40]	@ (800131c <HAL_Init+0x40>)
 80012f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	@ (800131c <HAL_Init+0x40>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f931 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f808 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fe8a 	bl	8001028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023c00 	.word	0x40023c00

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f93b 	bl	80015ba <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f911 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	@ (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000000 	.word	0x20000000
 8001378:	20000008 	.word	0x20000008
 800137c:	20000004 	.word	0x20000004

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_IncTick+0x20>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_IncTick+0x24>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <HAL_IncTick+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000118 	.word	0x20000118

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	@ (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000118 	.word	0x20000118

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ffee 	bl	80013a8 <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d005      	beq.n	80013e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_Delay+0x44>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013e6:	bf00      	nop
 80013e8:	f7ff ffde 	bl	80013a8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8f7      	bhi.n	80013e8 <HAL_Delay+0x28>
  {
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	@ (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	@ (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	@ (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	@ 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	@ 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff8e 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff47 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff5c 	bl	8001450 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff8e 	bl	80014c0 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5d 	bl	800146c <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffb0 	bl	8001528 <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	@ 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	e165      	b.n	80018bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f0:	2201      	movs	r2, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	429a      	cmp	r2, r3
 800160a:	f040 8154 	bne.w	80018b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d005      	beq.n	8001626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001622:	2b02      	cmp	r3, #2
 8001624:	d130      	bne.n	8001688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800165c:	2201      	movs	r2, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 0201 	and.w	r2, r3, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b03      	cmp	r3, #3
 8001692:	d017      	beq.n	80016c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d123      	bne.n	8001718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	08da      	lsrs	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3208      	adds	r2, #8
 80016d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	69b9      	ldr	r1, [r7, #24]
 8001714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80ae 	beq.w	80018b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b5d      	ldr	r3, [pc, #372]	@ (80018d4 <HAL_GPIO_Init+0x300>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	4a5c      	ldr	r2, [pc, #368]	@ (80018d4 <HAL_GPIO_Init+0x300>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001768:	6453      	str	r3, [r2, #68]	@ 0x44
 800176a:	4b5a      	ldr	r3, [pc, #360]	@ (80018d4 <HAL_GPIO_Init+0x300>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001776:	4a58      	ldr	r2, [pc, #352]	@ (80018d8 <HAL_GPIO_Init+0x304>)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4f      	ldr	r2, [pc, #316]	@ (80018dc <HAL_GPIO_Init+0x308>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d025      	beq.n	80017ee <HAL_GPIO_Init+0x21a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4e      	ldr	r2, [pc, #312]	@ (80018e0 <HAL_GPIO_Init+0x30c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01f      	beq.n	80017ea <HAL_GPIO_Init+0x216>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4d      	ldr	r2, [pc, #308]	@ (80018e4 <HAL_GPIO_Init+0x310>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d019      	beq.n	80017e6 <HAL_GPIO_Init+0x212>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4c      	ldr	r2, [pc, #304]	@ (80018e8 <HAL_GPIO_Init+0x314>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0x20e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4b      	ldr	r2, [pc, #300]	@ (80018ec <HAL_GPIO_Init+0x318>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00d      	beq.n	80017de <HAL_GPIO_Init+0x20a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4a      	ldr	r2, [pc, #296]	@ (80018f0 <HAL_GPIO_Init+0x31c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <HAL_GPIO_Init+0x206>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a49      	ldr	r2, [pc, #292]	@ (80018f4 <HAL_GPIO_Init+0x320>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_GPIO_Init+0x202>
 80017d2:	2306      	movs	r3, #6
 80017d4:	e00c      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017d6:	2307      	movs	r3, #7
 80017d8:	e00a      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017da:	2305      	movs	r3, #5
 80017dc:	e008      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017de:	2304      	movs	r3, #4
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017e2:	2303      	movs	r3, #3
 80017e4:	e004      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e002      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017ee:	2300      	movs	r3, #0
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	f002 0203 	and.w	r2, r2, #3
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	4093      	lsls	r3, r2
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001800:	4935      	ldr	r1, [pc, #212]	@ (80018d8 <HAL_GPIO_Init+0x304>)
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800180e:	4b3a      	ldr	r3, [pc, #232]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001832:	4a31      	ldr	r2, [pc, #196]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001838:	4b2f      	ldr	r3, [pc, #188]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800185c:	4a26      	ldr	r2, [pc, #152]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001862:	4b25      	ldr	r3, [pc, #148]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001886:	4a1c      	ldr	r2, [pc, #112]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800188c:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018b0:	4a11      	ldr	r2, [pc, #68]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3301      	adds	r3, #1
 80018ba:	61fb      	str	r3, [r7, #28]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	2b0f      	cmp	r3, #15
 80018c0:	f67f ae96 	bls.w	80015f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3724      	adds	r7, #36	@ 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40013800 	.word	0x40013800
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40020800 	.word	0x40020800
 80018e8:	40020c00 	.word	0x40020c00
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40021400 	.word	0x40021400
 80018f4:	40021800 	.word	0x40021800
 80018f8:	40013c00 	.word	0x40013c00

080018fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
 8001908:	4613      	mov	r3, r2
 800190a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800190c:	787b      	ldrb	r3, [r7, #1]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001918:	e003      	b.n	8001922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800191a:	887b      	ldrh	r3, [r7, #2]
 800191c:	041a      	lsls	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	619a      	str	r2, [r3, #24]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e12b      	b.n	8001b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff fb8e 	bl	8001078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2224      	movs	r2, #36	@ 0x24
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0201 	bic.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001994:	f001 f8b8 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8001998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4a81      	ldr	r2, [pc, #516]	@ (8001ba4 <HAL_I2C_Init+0x274>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d807      	bhi.n	80019b4 <HAL_I2C_Init+0x84>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4a80      	ldr	r2, [pc, #512]	@ (8001ba8 <HAL_I2C_Init+0x278>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	bf94      	ite	ls
 80019ac:	2301      	movls	r3, #1
 80019ae:	2300      	movhi	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	e006      	b.n	80019c2 <HAL_I2C_Init+0x92>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4a7d      	ldr	r2, [pc, #500]	@ (8001bac <HAL_I2C_Init+0x27c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	bf94      	ite	ls
 80019bc:	2301      	movls	r3, #1
 80019be:	2300      	movhi	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0e7      	b.n	8001b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4a78      	ldr	r2, [pc, #480]	@ (8001bb0 <HAL_I2C_Init+0x280>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0c9b      	lsrs	r3, r3, #18
 80019d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba4 <HAL_I2C_Init+0x274>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d802      	bhi.n	8001a04 <HAL_I2C_Init+0xd4>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3301      	adds	r3, #1
 8001a02:	e009      	b.n	8001a18 <HAL_I2C_Init+0xe8>
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	4a69      	ldr	r2, [pc, #420]	@ (8001bb4 <HAL_I2C_Init+0x284>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	099b      	lsrs	r3, r3, #6
 8001a16:	3301      	adds	r3, #1
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	495c      	ldr	r1, [pc, #368]	@ (8001ba4 <HAL_I2C_Init+0x274>)
 8001a34:	428b      	cmp	r3, r1
 8001a36:	d819      	bhi.n	8001a6c <HAL_I2C_Init+0x13c>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1e59      	subs	r1, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a46:	1c59      	adds	r1, r3, #1
 8001a48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a4c:	400b      	ands	r3, r1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00a      	beq.n	8001a68 <HAL_I2C_Init+0x138>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1e59      	subs	r1, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a60:	3301      	adds	r3, #1
 8001a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a66:	e051      	b.n	8001b0c <HAL_I2C_Init+0x1dc>
 8001a68:	2304      	movs	r3, #4
 8001a6a:	e04f      	b.n	8001b0c <HAL_I2C_Init+0x1dc>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d111      	bne.n	8001a98 <HAL_I2C_Init+0x168>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1e58      	subs	r0, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	440b      	add	r3, r1
 8001a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a86:	3301      	adds	r3, #1
 8001a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bf0c      	ite	eq
 8001a90:	2301      	moveq	r3, #1
 8001a92:	2300      	movne	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	e012      	b.n	8001abe <HAL_I2C_Init+0x18e>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1e58      	subs	r0, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6859      	ldr	r1, [r3, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	0099      	lsls	r1, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Init+0x196>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e022      	b.n	8001b0c <HAL_I2C_Init+0x1dc>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10e      	bne.n	8001aec <HAL_I2C_Init+0x1bc>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1e58      	subs	r0, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6859      	ldr	r1, [r3, #4]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	440b      	add	r3, r1
 8001adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aea:	e00f      	b.n	8001b0c <HAL_I2C_Init+0x1dc>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1e58      	subs	r0, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	0099      	lsls	r1, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b02:	3301      	adds	r3, #1
 8001b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	6809      	ldr	r1, [r1, #0]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6911      	ldr	r1, [r2, #16]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68d2      	ldr	r2, [r2, #12]
 8001b46:	4311      	orrs	r1, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2220      	movs	r2, #32
 8001b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	000186a0 	.word	0x000186a0
 8001ba8:	001e847f 	.word	0x001e847f
 8001bac:	003d08ff 	.word	0x003d08ff
 8001bb0:	431bde83 	.word	0x431bde83
 8001bb4:	10624dd3 	.word	0x10624dd3

08001bb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	817b      	strh	r3, [r7, #10]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff fbec 	bl	80013a8 <HAL_GetTick>
 8001bd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	f040 80e0 	bne.w	8001da0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2319      	movs	r3, #25
 8001be6:	2201      	movs	r2, #1
 8001be8:	4970      	ldr	r1, [pc, #448]	@ (8001dac <HAL_I2C_Master_Transmit+0x1f4>)
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fc64 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e0d3      	b.n	8001da2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_I2C_Master_Transmit+0x50>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e0cc      	b.n	8001da2 <HAL_I2C_Master_Transmit+0x1ea>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d007      	beq.n	8001c2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2221      	movs	r2, #33	@ 0x21
 8001c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2210      	movs	r2, #16
 8001c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	893a      	ldrh	r2, [r7, #8]
 8001c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4a50      	ldr	r2, [pc, #320]	@ (8001db0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c70:	8979      	ldrh	r1, [r7, #10]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	6a3a      	ldr	r2, [r7, #32]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 face 	bl	8002218 <I2C_MasterRequestWrite>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e08d      	b.n	8001da2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c9c:	e066      	b.n	8001d6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	6a39      	ldr	r1, [r7, #32]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 fd22 	bl	80026ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00d      	beq.n	8001cca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d107      	bne.n	8001cc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06b      	b.n	8001da2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	781a      	ldrb	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d11b      	bne.n	8001d40 <HAL_I2C_Master_Transmit+0x188>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d017      	beq.n	8001d40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	6a39      	ldr	r1, [r7, #32]
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 fd19 	bl	800277c <I2C_WaitOnBTFFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00d      	beq.n	8001d6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d107      	bne.n	8001d68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e01a      	b.n	8001da2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d194      	bne.n	8001c9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e000      	b.n	8001da2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001da0:	2302      	movs	r3, #2
  }
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	00100002 	.word	0x00100002
 8001db0:	ffff0000 	.word	0xffff0000

08001db4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	@ 0x30
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	817b      	strh	r3, [r7, #10]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff faee 	bl	80013a8 <HAL_GetTick>
 8001dcc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b20      	cmp	r3, #32
 8001dd8:	f040 8217 	bne.w	800220a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2319      	movs	r3, #25
 8001de2:	2201      	movs	r2, #1
 8001de4:	497c      	ldr	r1, [pc, #496]	@ (8001fd8 <HAL_I2C_Master_Receive+0x224>)
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 fb66 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
 8001df4:	e20a      	b.n	800220c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_I2C_Master_Receive+0x50>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e203      	b.n	800220c <HAL_I2C_Master_Receive+0x458>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d007      	beq.n	8001e2a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2222      	movs	r2, #34	@ 0x22
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2210      	movs	r2, #16
 8001e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	893a      	ldrh	r2, [r7, #8]
 8001e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4a5c      	ldr	r2, [pc, #368]	@ (8001fdc <HAL_I2C_Master_Receive+0x228>)
 8001e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e6c:	8979      	ldrh	r1, [r7, #10]
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 fa52 	bl	800231c <I2C_MasterRequestRead>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e1c4      	b.n	800220c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d113      	bne.n	8001eb2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	623b      	str	r3, [r7, #32]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	623b      	str	r3, [r7, #32]
 8001e9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e198      	b.n	80021e4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d11b      	bne.n	8001ef2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ec8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e178      	b.n	80021e4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d11b      	bne.n	8001f32 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	e158      	b.n	80021e4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f58:	e144      	b.n	80021e4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	f200 80f1 	bhi.w	8002146 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d123      	bne.n	8001fb4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fc4b 	bl	800280c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e145      	b.n	800220c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fb2:	e117      	b.n	80021e4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d14e      	bne.n	800205a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4906      	ldr	r1, [pc, #24]	@ (8001fe0 <HAL_I2C_Master_Receive+0x22c>)
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 fa76 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d008      	beq.n	8001fe4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e11a      	b.n	800220c <HAL_I2C_Master_Receive+0x458>
 8001fd6:	bf00      	nop
 8001fd8:	00100002 	.word	0x00100002
 8001fdc:	ffff0000 	.word	0xffff0000
 8001fe0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002058:	e0c4      	b.n	80021e4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002060:	2200      	movs	r2, #0
 8002062:	496c      	ldr	r1, [pc, #432]	@ (8002214 <HAL_I2C_Master_Receive+0x460>)
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 fa27 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0cb      	b.n	800220c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020bc:	2200      	movs	r2, #0
 80020be:	4955      	ldr	r1, [pc, #340]	@ (8002214 <HAL_I2C_Master_Receive+0x460>)
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f9f9 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e09d      	b.n	800220c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002144:	e04e      	b.n	80021e4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002148:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fb5e 	bl	800280c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e058      	b.n	800220c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b04      	cmp	r3, #4
 8002198:	d124      	bne.n	80021e4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d107      	bne.n	80021b2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021b0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f47f aeb6 	bne.w	8001f5a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800220a:	2302      	movs	r3, #2
  }
}
 800220c:	4618      	mov	r0, r3
 800220e:	3728      	adds	r7, #40	@ 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	00010004 	.word	0x00010004

08002218 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af02      	add	r7, sp, #8
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	607a      	str	r2, [r7, #4]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	460b      	mov	r3, r1
 8002226:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d006      	beq.n	8002242 <I2C_MasterRequestWrite+0x2a>
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d003      	beq.n	8002242 <I2C_MasterRequestWrite+0x2a>
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002240:	d108      	bne.n	8002254 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e00b      	b.n	800226c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	2b12      	cmp	r3, #18
 800225a:	d107      	bne.n	800226c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800226a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f91d 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00d      	beq.n	80022a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002292:	d103      	bne.n	800229c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800229a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e035      	b.n	800230c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022a8:	d108      	bne.n	80022bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022aa:	897b      	ldrh	r3, [r7, #10]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022b8:	611a      	str	r2, [r3, #16]
 80022ba:	e01b      	b.n	80022f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022bc:	897b      	ldrh	r3, [r7, #10]
 80022be:	11db      	asrs	r3, r3, #7
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f003 0306 	and.w	r3, r3, #6
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f063 030f 	orn	r3, r3, #15
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	490e      	ldr	r1, [pc, #56]	@ (8002314 <I2C_MasterRequestWrite+0xfc>)
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f966 	bl	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e010      	b.n	800230c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022ea:	897b      	ldrh	r3, [r7, #10]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4907      	ldr	r1, [pc, #28]	@ (8002318 <I2C_MasterRequestWrite+0x100>)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f956 	bl	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	00010008 	.word	0x00010008
 8002318:	00010002 	.word	0x00010002

0800231c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af02      	add	r7, sp, #8
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	460b      	mov	r3, r1
 800232a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002340:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b08      	cmp	r3, #8
 8002346:	d006      	beq.n	8002356 <I2C_MasterRequestRead+0x3a>
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d003      	beq.n	8002356 <I2C_MasterRequestRead+0x3a>
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002354:	d108      	bne.n	8002368 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e00b      	b.n	8002380 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	2b11      	cmp	r3, #17
 800236e:	d107      	bne.n	8002380 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800237e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f893 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023a6:	d103      	bne.n	80023b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e079      	b.n	80024a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023bc:	d108      	bne.n	80023d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023be:	897b      	ldrh	r3, [r7, #10]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	611a      	str	r2, [r3, #16]
 80023ce:	e05f      	b.n	8002490 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023d0:	897b      	ldrh	r3, [r7, #10]
 80023d2:	11db      	asrs	r3, r3, #7
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f003 0306 	and.w	r3, r3, #6
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f063 030f 	orn	r3, r3, #15
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4930      	ldr	r1, [pc, #192]	@ (80024b0 <I2C_MasterRequestRead+0x194>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f8dc 	bl	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e054      	b.n	80024a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023fe:	897b      	ldrh	r3, [r7, #10]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4929      	ldr	r1, [pc, #164]	@ (80024b4 <I2C_MasterRequestRead+0x198>)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f8cc 	bl	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e044      	b.n	80024a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002442:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f831 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00d      	beq.n	8002478 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800246a:	d103      	bne.n	8002474 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002472:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e017      	b.n	80024a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002478:	897b      	ldrh	r3, [r7, #10]
 800247a:	11db      	asrs	r3, r3, #7
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f003 0306 	and.w	r3, r3, #6
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f063 030e 	orn	r3, r3, #14
 8002488:	b2da      	uxtb	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	4907      	ldr	r1, [pc, #28]	@ (80024b4 <I2C_MasterRequestRead+0x198>)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f888 	bl	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	00010008 	.word	0x00010008
 80024b4:	00010002 	.word	0x00010002

080024b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024c8:	e048      	b.n	800255c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d044      	beq.n	800255c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d2:	f7fe ff69 	bl	80013a8 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d302      	bcc.n	80024e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d139      	bne.n	800255c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	0c1b      	lsrs	r3, r3, #16
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d10d      	bne.n	800250e <I2C_WaitOnFlagUntilTimeout+0x56>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	43da      	mvns	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	4013      	ands	r3, r2
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	e00c      	b.n	8002528 <I2C_WaitOnFlagUntilTimeout+0x70>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	43da      	mvns	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	4013      	ands	r3, r2
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	429a      	cmp	r2, r3
 800252c:	d116      	bne.n	800255c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e023      	b.n	80025a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	0c1b      	lsrs	r3, r3, #16
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10d      	bne.n	8002582 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	43da      	mvns	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	e00c      	b.n	800259c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	43da      	mvns	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4013      	ands	r3, r2
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d093      	beq.n	80024ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025ba:	e071      	b.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ca:	d123      	bne.n	8002614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	f043 0204 	orr.w	r2, r3, #4
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e067      	b.n	80026e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261a:	d041      	beq.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261c:	f7fe fec4 	bl	80013a8 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	d302      	bcc.n	8002632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d136      	bne.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d10c      	bne.n	8002656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4013      	ands	r3, r2
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	e00b      	b.n	800266e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	43da      	mvns	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4013      	ands	r3, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d016      	beq.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	f043 0220 	orr.w	r2, r3, #32
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e021      	b.n	80026e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	0c1b      	lsrs	r3, r3, #16
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d10c      	bne.n	80026c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	43da      	mvns	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	4013      	ands	r3, r2
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf14      	ite	ne
 80026bc:	2301      	movne	r3, #1
 80026be:	2300      	moveq	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e00b      	b.n	80026dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	43da      	mvns	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4013      	ands	r3, r2
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf14      	ite	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	2300      	moveq	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f47f af6d 	bne.w	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026f8:	e034      	b.n	8002764 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f8e3 	bl	80028c6 <I2C_IsAcknowledgeFailed>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e034      	b.n	8002774 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d028      	beq.n	8002764 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002712:	f7fe fe49 	bl	80013a8 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	429a      	cmp	r2, r3
 8002720:	d302      	bcc.n	8002728 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d11d      	bne.n	8002764 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002732:	2b80      	cmp	r3, #128	@ 0x80
 8002734:	d016      	beq.n	8002764 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	f043 0220 	orr.w	r2, r3, #32
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e007      	b.n	8002774 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800276e:	2b80      	cmp	r3, #128	@ 0x80
 8002770:	d1c3      	bne.n	80026fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002788:	e034      	b.n	80027f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f89b 	bl	80028c6 <I2C_IsAcknowledgeFailed>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e034      	b.n	8002804 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d028      	beq.n	80027f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a2:	f7fe fe01 	bl	80013a8 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d302      	bcc.n	80027b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d11d      	bne.n	80027f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d016      	beq.n	80027f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e007      	b.n	8002804 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d1c3      	bne.n	800278a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002818:	e049      	b.n	80028ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b10      	cmp	r3, #16
 8002826:	d119      	bne.n	800285c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0210 	mvn.w	r2, #16
 8002830:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e030      	b.n	80028be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285c:	f7fe fda4 	bl	80013a8 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	429a      	cmp	r2, r3
 800286a:	d302      	bcc.n	8002872 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d11d      	bne.n	80028ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287c:	2b40      	cmp	r3, #64	@ 0x40
 800287e:	d016      	beq.n	80028ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	f043 0220 	orr.w	r2, r3, #32
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e007      	b.n	80028be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b8:	2b40      	cmp	r3, #64	@ 0x40
 80028ba:	d1ae      	bne.n	800281a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028dc:	d11b      	bne.n	8002916 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	f043 0204 	orr.w	r2, r3, #4
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0cc      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002938:	4b68      	ldr	r3, [pc, #416]	@ (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d90c      	bls.n	8002960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b65      	ldr	r3, [pc, #404]	@ (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b63      	ldr	r3, [pc, #396]	@ (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b8      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002978:	4b59      	ldr	r3, [pc, #356]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a58      	ldr	r2, [pc, #352]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002982:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002990:	4b53      	ldr	r3, [pc, #332]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4a52      	ldr	r2, [pc, #328]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800299a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b50      	ldr	r3, [pc, #320]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	494d      	ldr	r1, [pc, #308]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d044      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b47      	ldr	r3, [pc, #284]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d119      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e07f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e067      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a02:	4b37      	ldr	r3, [pc, #220]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f023 0203 	bic.w	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4934      	ldr	r1, [pc, #208]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a14:	f7fe fcc8 	bl	80013a8 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7fe fcc4 	bl	80013a8 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e04f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 020c 	and.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1eb      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a44:	4b25      	ldr	r3, [pc, #148]	@ (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d20c      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b22      	ldr	r3, [pc, #136]	@ (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b20      	ldr	r3, [pc, #128]	@ (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e032      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b19      	ldr	r3, [pc, #100]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4916      	ldr	r1, [pc, #88]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a96:	4b12      	ldr	r3, [pc, #72]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	490e      	ldr	r1, [pc, #56]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aaa:	f000 f855 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	490a      	ldr	r1, [pc, #40]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	5ccb      	ldrb	r3, [r1, r3]
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	4a09      	ldr	r2, [pc, #36]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fc28 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023c00 	.word	0x40023c00
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	080046b0 	.word	0x080046b0
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	20000004 	.word	0x20000004

08002af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af4:	4b03      	ldr	r3, [pc, #12]	@ (8002b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000000 	.word	0x20000000

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b0c:	f7ff fff0 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0a9b      	lsrs	r3, r3, #10
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4903      	ldr	r1, [pc, #12]	@ (8002b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	080046c0 	.word	0x080046c0

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b34:	f7ff ffdc 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	0b5b      	lsrs	r3, r3, #13
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4903      	ldr	r1, [pc, #12]	@ (8002b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40023800 	.word	0x40023800
 8002b54:	080046c0 	.word	0x080046c0

08002b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b5c:	b0ae      	sub	sp, #184	@ 0xb8
 8002b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7e:	4bcb      	ldr	r3, [pc, #812]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x354>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	f200 8206 	bhi.w	8002f98 <HAL_RCC_GetSysClockFreq+0x440>
 8002b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b94 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002bc9 	.word	0x08002bc9
 8002b98:	08002f99 	.word	0x08002f99
 8002b9c:	08002f99 	.word	0x08002f99
 8002ba0:	08002f99 	.word	0x08002f99
 8002ba4:	08002bd1 	.word	0x08002bd1
 8002ba8:	08002f99 	.word	0x08002f99
 8002bac:	08002f99 	.word	0x08002f99
 8002bb0:	08002f99 	.word	0x08002f99
 8002bb4:	08002bd9 	.word	0x08002bd9
 8002bb8:	08002f99 	.word	0x08002f99
 8002bbc:	08002f99 	.word	0x08002f99
 8002bc0:	08002f99 	.word	0x08002f99
 8002bc4:	08002dc9 	.word	0x08002dc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc8:	4bb9      	ldr	r3, [pc, #740]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002bca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bce:	e1e7      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd0:	4bb8      	ldr	r3, [pc, #736]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bd6:	e1e3      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd8:	4bb4      	ldr	r3, [pc, #720]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x354>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002be0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be4:	4bb1      	ldr	r3, [pc, #708]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x354>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d071      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf0:	4bae      	ldr	r3, [pc, #696]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x354>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	099b      	lsrs	r3, r3, #6
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bfc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c16:	4622      	mov	r2, r4
 8002c18:	462b      	mov	r3, r5
 8002c1a:	f04f 0000 	mov.w	r0, #0
 8002c1e:	f04f 0100 	mov.w	r1, #0
 8002c22:	0159      	lsls	r1, r3, #5
 8002c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c28:	0150      	lsls	r0, r2, #5
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4621      	mov	r1, r4
 8002c30:	1a51      	subs	r1, r2, r1
 8002c32:	6439      	str	r1, [r7, #64]	@ 0x40
 8002c34:	4629      	mov	r1, r5
 8002c36:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c48:	4649      	mov	r1, r9
 8002c4a:	018b      	lsls	r3, r1, #6
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c52:	4641      	mov	r1, r8
 8002c54:	018a      	lsls	r2, r1, #6
 8002c56:	4641      	mov	r1, r8
 8002c58:	1a51      	subs	r1, r2, r1
 8002c5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c5c:	4649      	mov	r1, r9
 8002c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002c70:	4649      	mov	r1, r9
 8002c72:	00cb      	lsls	r3, r1, #3
 8002c74:	4641      	mov	r1, r8
 8002c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c7a:	4641      	mov	r1, r8
 8002c7c:	00ca      	lsls	r2, r1, #3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	4622      	mov	r2, r4
 8002c86:	189b      	adds	r3, r3, r2
 8002c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c8a:	462b      	mov	r3, r5
 8002c8c:	460a      	mov	r2, r1
 8002c8e:	eb42 0303 	adc.w	r3, r2, r3
 8002c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	024b      	lsls	r3, r1, #9
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002caa:	4621      	mov	r1, r4
 8002cac:	024a      	lsls	r2, r1, #9
 8002cae:	4610      	mov	r0, r2
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cbc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cc0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002cc4:	f7fd fe32 	bl	800092c <__aeabi_uldivmod>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cd2:	e067      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd4:	4b75      	ldr	r3, [pc, #468]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ce0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cee:	2300      	movs	r3, #0
 8002cf0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002cf2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002cf6:	4622      	mov	r2, r4
 8002cf8:	462b      	mov	r3, r5
 8002cfa:	f04f 0000 	mov.w	r0, #0
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	0159      	lsls	r1, r3, #5
 8002d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d08:	0150      	lsls	r0, r2, #5
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4621      	mov	r1, r4
 8002d10:	1a51      	subs	r1, r2, r1
 8002d12:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002d14:	4629      	mov	r1, r5
 8002d16:	eb63 0301 	sbc.w	r3, r3, r1
 8002d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002d28:	4649      	mov	r1, r9
 8002d2a:	018b      	lsls	r3, r1, #6
 8002d2c:	4641      	mov	r1, r8
 8002d2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d32:	4641      	mov	r1, r8
 8002d34:	018a      	lsls	r2, r1, #6
 8002d36:	4641      	mov	r1, r8
 8002d38:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d3c:	4649      	mov	r1, r9
 8002d3e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d4e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d56:	4692      	mov	sl, r2
 8002d58:	469b      	mov	fp, r3
 8002d5a:	4623      	mov	r3, r4
 8002d5c:	eb1a 0303 	adds.w	r3, sl, r3
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	462b      	mov	r3, r5
 8002d64:	eb4b 0303 	adc.w	r3, fp, r3
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d76:	4629      	mov	r1, r5
 8002d78:	028b      	lsls	r3, r1, #10
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d80:	4621      	mov	r1, r4
 8002d82:	028a      	lsls	r2, r1, #10
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d90:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d92:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d96:	f7fd fdc9 	bl	800092c <__aeabi_uldivmod>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4613      	mov	r3, r2
 8002da0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002da4:	4b41      	ldr	r3, [pc, #260]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x354>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	3301      	adds	r3, #1
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dc6:	e0eb      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc8:	4b38      	ldr	r3, [pc, #224]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x354>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dd4:	4b35      	ldr	r3, [pc, #212]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d06b      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de0:	4b32      	ldr	r3, [pc, #200]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x354>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	2200      	movs	r2, #0
 8002de8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002dec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002df4:	2300      	movs	r3, #0
 8002df6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002df8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002dfc:	4622      	mov	r2, r4
 8002dfe:	462b      	mov	r3, r5
 8002e00:	f04f 0000 	mov.w	r0, #0
 8002e04:	f04f 0100 	mov.w	r1, #0
 8002e08:	0159      	lsls	r1, r3, #5
 8002e0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0e:	0150      	lsls	r0, r2, #5
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4621      	mov	r1, r4
 8002e16:	1a51      	subs	r1, r2, r1
 8002e18:	61b9      	str	r1, [r7, #24]
 8002e1a:	4629      	mov	r1, r5
 8002e1c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e2e:	4659      	mov	r1, fp
 8002e30:	018b      	lsls	r3, r1, #6
 8002e32:	4651      	mov	r1, sl
 8002e34:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e38:	4651      	mov	r1, sl
 8002e3a:	018a      	lsls	r2, r1, #6
 8002e3c:	4651      	mov	r1, sl
 8002e3e:	ebb2 0801 	subs.w	r8, r2, r1
 8002e42:	4659      	mov	r1, fp
 8002e44:	eb63 0901 	sbc.w	r9, r3, r1
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e5c:	4690      	mov	r8, r2
 8002e5e:	4699      	mov	r9, r3
 8002e60:	4623      	mov	r3, r4
 8002e62:	eb18 0303 	adds.w	r3, r8, r3
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	462b      	mov	r3, r5
 8002e6a:	eb49 0303 	adc.w	r3, r9, r3
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	024b      	lsls	r3, r1, #9
 8002e80:	4621      	mov	r1, r4
 8002e82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e86:	4621      	mov	r1, r4
 8002e88:	024a      	lsls	r2, r1, #9
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e92:	2200      	movs	r2, #0
 8002e94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e96:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e9c:	f7fd fd46 	bl	800092c <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eaa:	e065      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x420>
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	00f42400 	.word	0x00f42400
 8002eb4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ec8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002eca:	2300      	movs	r3, #0
 8002ecc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ece:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002ed2:	4642      	mov	r2, r8
 8002ed4:	464b      	mov	r3, r9
 8002ed6:	f04f 0000 	mov.w	r0, #0
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	0159      	lsls	r1, r3, #5
 8002ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee4:	0150      	lsls	r0, r2, #5
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4641      	mov	r1, r8
 8002eec:	1a51      	subs	r1, r2, r1
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	4649      	mov	r1, r9
 8002ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f04:	4659      	mov	r1, fp
 8002f06:	018b      	lsls	r3, r1, #6
 8002f08:	4651      	mov	r1, sl
 8002f0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f0e:	4651      	mov	r1, sl
 8002f10:	018a      	lsls	r2, r1, #6
 8002f12:	4651      	mov	r1, sl
 8002f14:	1a54      	subs	r4, r2, r1
 8002f16:	4659      	mov	r1, fp
 8002f18:	eb63 0501 	sbc.w	r5, r3, r1
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	00eb      	lsls	r3, r5, #3
 8002f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f2a:	00e2      	lsls	r2, r4, #3
 8002f2c:	4614      	mov	r4, r2
 8002f2e:	461d      	mov	r5, r3
 8002f30:	4643      	mov	r3, r8
 8002f32:	18e3      	adds	r3, r4, r3
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	464b      	mov	r3, r9
 8002f38:	eb45 0303 	adc.w	r3, r5, r3
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	028b      	lsls	r3, r1, #10
 8002f4e:	4621      	mov	r1, r4
 8002f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f54:	4621      	mov	r1, r4
 8002f56:	028a      	lsls	r2, r1, #10
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f60:	2200      	movs	r2, #0
 8002f62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f64:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f6a:	f7fd fcdf 	bl	800092c <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4613      	mov	r3, r2
 8002f74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f78:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0f1b      	lsrs	r3, r3, #28
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002f86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f96:	e003      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f98:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	37b8      	adds	r7, #184	@ 0xb8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	00f42400 	.word	0x00f42400

08002fb8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e28d      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8083 	beq.w	80030de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fd8:	4b94      	ldr	r3, [pc, #592]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d019      	beq.n	8003018 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fe4:	4b91      	ldr	r3, [pc, #580]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
        || \
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ff0:	4b8e      	ldr	r3, [pc, #568]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ffc:	d00c      	beq.n	8003018 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffe:	4b8b      	ldr	r3, [pc, #556]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d112      	bne.n	8003030 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300a:	4b88      	ldr	r3, [pc, #544]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003012:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003016:	d10b      	bne.n	8003030 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	4b84      	ldr	r3, [pc, #528]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d05b      	beq.n	80030dc <HAL_RCC_OscConfig+0x124>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d157      	bne.n	80030dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e25a      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003038:	d106      	bne.n	8003048 <HAL_RCC_OscConfig+0x90>
 800303a:	4b7c      	ldr	r3, [pc, #496]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a7b      	ldr	r2, [pc, #492]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8003040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e01d      	b.n	8003084 <HAL_RCC_OscConfig+0xcc>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0xb4>
 8003052:	4b76      	ldr	r3, [pc, #472]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a75      	ldr	r2, [pc, #468]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8003058:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	4b73      	ldr	r3, [pc, #460]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a72      	ldr	r2, [pc, #456]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0xcc>
 800306c:	4b6f      	ldr	r3, [pc, #444]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a6e      	ldr	r2, [pc, #440]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8003072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	4b6c      	ldr	r3, [pc, #432]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a6b      	ldr	r2, [pc, #428]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 800307e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d013      	beq.n	80030b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fe f98c 	bl	80013a8 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003094:	f7fe f988 	bl	80013a8 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	@ 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e21f      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b61      	ldr	r3, [pc, #388]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0xdc>
 80030b2:	e014      	b.n	80030de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe f978 	bl	80013a8 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030bc:	f7fe f974 	bl	80013a8 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b64      	cmp	r3, #100	@ 0x64
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e20b      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	4b57      	ldr	r3, [pc, #348]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x104>
 80030da:	e000      	b.n	80030de <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d06f      	beq.n	80031ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030ea:	4b50      	ldr	r3, [pc, #320]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d017      	beq.n	8003126 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030f6:	4b4d      	ldr	r3, [pc, #308]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
        || \
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d105      	bne.n	800310e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003102:	4b4a      	ldr	r3, [pc, #296]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310e:	4b47      	ldr	r3, [pc, #284]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003116:	2b0c      	cmp	r3, #12
 8003118:	d11c      	bne.n	8003154 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311a:	4b44      	ldr	r3, [pc, #272]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d116      	bne.n	8003154 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	4b41      	ldr	r3, [pc, #260]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_RCC_OscConfig+0x186>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e1d3      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313e:	4b3b      	ldr	r3, [pc, #236]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4937      	ldr	r1, [pc, #220]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	e03a      	b.n	80031ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d020      	beq.n	800319e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800315c:	4b34      	ldr	r3, [pc, #208]	@ (8003230 <HAL_RCC_OscConfig+0x278>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fe f921 	bl	80013a8 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316a:	f7fe f91d 	bl	80013a8 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e1b4      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317c:	4b2b      	ldr	r3, [pc, #172]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003188:	4b28      	ldr	r3, [pc, #160]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4925      	ldr	r1, [pc, #148]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8003198:	4313      	orrs	r3, r2
 800319a:	600b      	str	r3, [r1, #0]
 800319c:	e015      	b.n	80031ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319e:	4b24      	ldr	r3, [pc, #144]	@ (8003230 <HAL_RCC_OscConfig+0x278>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe f900 	bl	80013a8 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ac:	f7fe f8fc 	bl	80013a8 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e193      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	4b1b      	ldr	r3, [pc, #108]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d036      	beq.n	8003244 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe f8e0 	bl	80013a8 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ec:	f7fe f8dc 	bl	80013a8 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e173      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fe:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <HAL_RCC_OscConfig+0x274>)
 8003200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x234>
 800320a:	e01b      	b.n	8003244 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320c:	4b09      	ldr	r3, [pc, #36]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7fe f8c9 	bl	80013a8 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003218:	e00e      	b.n	8003238 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321a:	f7fe f8c5 	bl	80013a8 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d907      	bls.n	8003238 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e15c      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
 800322c:	40023800 	.word	0x40023800
 8003230:	42470000 	.word	0x42470000
 8003234:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	4b8a      	ldr	r3, [pc, #552]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 800323a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ea      	bne.n	800321a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8097 	beq.w	8003380 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003256:	4b83      	ldr	r3, [pc, #524]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	4b7f      	ldr	r3, [pc, #508]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	4a7e      	ldr	r2, [pc, #504]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003270:	6413      	str	r3, [r2, #64]	@ 0x40
 8003272:	4b7c      	ldr	r3, [pc, #496]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	4b79      	ldr	r3, [pc, #484]	@ (8003468 <HAL_RCC_OscConfig+0x4b0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d118      	bne.n	80032c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328e:	4b76      	ldr	r3, [pc, #472]	@ (8003468 <HAL_RCC_OscConfig+0x4b0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a75      	ldr	r2, [pc, #468]	@ (8003468 <HAL_RCC_OscConfig+0x4b0>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329a:	f7fe f885 	bl	80013a8 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a2:	f7fe f881 	bl	80013a8 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e118      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	4b6c      	ldr	r3, [pc, #432]	@ (8003468 <HAL_RCC_OscConfig+0x4b0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x31e>
 80032c8:	4b66      	ldr	r3, [pc, #408]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032cc:	4a65      	ldr	r2, [pc, #404]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d4:	e01c      	b.n	8003310 <HAL_RCC_OscConfig+0x358>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x340>
 80032de:	4b61      	ldr	r3, [pc, #388]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e2:	4a60      	ldr	r2, [pc, #384]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ea:	4b5e      	ldr	r3, [pc, #376]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ee:	4a5d      	ldr	r2, [pc, #372]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f6:	e00b      	b.n	8003310 <HAL_RCC_OscConfig+0x358>
 80032f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fc:	4a59      	ldr	r2, [pc, #356]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	6713      	str	r3, [r2, #112]	@ 0x70
 8003304:	4b57      	ldr	r3, [pc, #348]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003308:	4a56      	ldr	r2, [pc, #344]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 800330a:	f023 0304 	bic.w	r3, r3, #4
 800330e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d015      	beq.n	8003344 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fe f846 	bl	80013a8 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331e:	e00a      	b.n	8003336 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7fe f842 	bl	80013a8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e0d7      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003336:	4b4b      	ldr	r3, [pc, #300]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0ee      	beq.n	8003320 <HAL_RCC_OscConfig+0x368>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fe f830 	bl	80013a8 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fe f82c 	bl	80013a8 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0c1      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003362:	4b40      	ldr	r3, [pc, #256]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1ee      	bne.n	800334c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003374:	4b3b      	ldr	r3, [pc, #236]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	4a3a      	ldr	r2, [pc, #232]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 800337a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800337e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80ad 	beq.w	80034e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800338a:	4b36      	ldr	r3, [pc, #216]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b08      	cmp	r3, #8
 8003394:	d060      	beq.n	8003458 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d145      	bne.n	800342a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339e:	4b33      	ldr	r3, [pc, #204]	@ (800346c <HAL_RCC_OscConfig+0x4b4>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe f800 	bl	80013a8 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fd fffc 	bl	80013a8 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e093      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033be:	4b29      	ldr	r3, [pc, #164]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	019b      	lsls	r3, r3, #6
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	3b01      	subs	r3, #1
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	061b      	lsls	r3, r3, #24
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	071b      	lsls	r3, r3, #28
 80033f6:	491b      	ldr	r1, [pc, #108]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033fc:	4b1b      	ldr	r3, [pc, #108]	@ (800346c <HAL_RCC_OscConfig+0x4b4>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fd ffd1 	bl	80013a8 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7fd ffcd 	bl	80013a8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e064      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341c:	4b11      	ldr	r3, [pc, #68]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x452>
 8003428:	e05c      	b.n	80034e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4b10      	ldr	r3, [pc, #64]	@ (800346c <HAL_RCC_OscConfig+0x4b4>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fd ffba 	bl	80013a8 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003438:	f7fd ffb6 	bl	80013a8 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e04d      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <HAL_RCC_OscConfig+0x4ac>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x480>
 8003456:	e045      	b.n	80034e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d107      	bne.n	8003470 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e040      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
 8003464:	40023800 	.word	0x40023800
 8003468:	40007000 	.word	0x40007000
 800346c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003470:	4b1f      	ldr	r3, [pc, #124]	@ (80034f0 <HAL_RCC_OscConfig+0x538>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d030      	beq.n	80034e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d129      	bne.n	80034e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d122      	bne.n	80034e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034a0:	4013      	ands	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d119      	bne.n	80034e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	3b01      	subs	r3, #1
 80034ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d10f      	bne.n	80034e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d107      	bne.n	80034e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800

080034f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e042      	b.n	800358c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd fdf4 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	@ 0x24
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f973 	bl	8003824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800354c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800355c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800356c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	@ 0x28
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d175      	bne.n	80036a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_UART_Transmit+0x2c>
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e06e      	b.n	80036a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2221      	movs	r2, #33	@ 0x21
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035d2:	f7fd fee9 	bl	80013a8 <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	88fa      	ldrh	r2, [r7, #6]
 80035e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ec:	d108      	bne.n	8003600 <HAL_UART_Transmit+0x6c>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d104      	bne.n	8003600 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e003      	b.n	8003608 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003608:	e02e      	b.n	8003668 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2200      	movs	r2, #0
 8003612:	2180      	movs	r1, #128	@ 0x80
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f848 	bl	80036aa <UART_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e03a      	b.n	80036a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003640:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	3302      	adds	r3, #2
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	e007      	b.n	800365a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	3301      	adds	r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1cb      	bne.n	800360a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2200      	movs	r2, #0
 800367a:	2140      	movs	r1, #64	@ 0x40
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f814 	bl	80036aa <UART_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e006      	b.n	80036a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e000      	b.n	80036a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4613      	mov	r3, r2
 80036b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ba:	e03b      	b.n	8003734 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c2:	d037      	beq.n	8003734 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c4:	f7fd fe70 	bl	80013a8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	6a3a      	ldr	r2, [r7, #32]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <UART_WaitOnFlagUntilTimeout+0x30>
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e03a      	b.n	8003754 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d023      	beq.n	8003734 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b80      	cmp	r3, #128	@ 0x80
 80036f0:	d020      	beq.n	8003734 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b40      	cmp	r3, #64	@ 0x40
 80036f6:	d01d      	beq.n	8003734 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b08      	cmp	r3, #8
 8003704:	d116      	bne.n	8003734 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f81d 	bl	800375c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2208      	movs	r2, #8
 8003726:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e00f      	b.n	8003754 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4013      	ands	r3, r2
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	429a      	cmp	r2, r3
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	429a      	cmp	r2, r3
 8003750:	d0b4      	beq.n	80036bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800375c:	b480      	push	{r7}
 800375e:	b095      	sub	sp, #84	@ 0x54
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	330c      	adds	r3, #12
 800376a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376e:	e853 3f00 	ldrex	r3, [r3]
 8003772:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003776:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800377a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	330c      	adds	r3, #12
 8003782:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003784:	643a      	str	r2, [r7, #64]	@ 0x40
 8003786:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003788:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800378a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800378c:	e841 2300 	strex	r3, r2, [r1]
 8003790:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e5      	bne.n	8003764 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3314      	adds	r3, #20
 800379e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3314      	adds	r3, #20
 80037b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e5      	bne.n	8003798 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d119      	bne.n	8003808 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	330c      	adds	r3, #12
 80037da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	e853 3f00 	ldrex	r3, [r3]
 80037e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f023 0310 	bic.w	r3, r3, #16
 80037ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	330c      	adds	r3, #12
 80037f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037f4:	61ba      	str	r2, [r7, #24]
 80037f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f8:	6979      	ldr	r1, [r7, #20]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	e841 2300 	strex	r3, r2, [r1]
 8003800:	613b      	str	r3, [r7, #16]
   return(result);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1e5      	bne.n	80037d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003816:	bf00      	nop
 8003818:	3754      	adds	r7, #84	@ 0x54
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003828:	b0c0      	sub	sp, #256	@ 0x100
 800382a:	af00      	add	r7, sp, #0
 800382c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003840:	68d9      	ldr	r1, [r3, #12]
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	ea40 0301 	orr.w	r3, r0, r1
 800384c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	431a      	orrs	r2, r3
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	431a      	orrs	r2, r3
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800387c:	f021 010c 	bic.w	r1, r1, #12
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800388a:	430b      	orrs	r3, r1
 800388c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800388e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800389a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389e:	6999      	ldr	r1, [r3, #24]
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	ea40 0301 	orr.w	r3, r0, r1
 80038aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b8f      	ldr	r3, [pc, #572]	@ (8003af0 <UART_SetConfig+0x2cc>)
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d005      	beq.n	80038c4 <UART_SetConfig+0xa0>
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4b8d      	ldr	r3, [pc, #564]	@ (8003af4 <UART_SetConfig+0x2d0>)
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d104      	bne.n	80038ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038c4:	f7ff f934 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 80038c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038cc:	e003      	b.n	80038d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038ce:	f7ff f91b 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 80038d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e0:	f040 810c 	bne.w	8003afc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038e8:	2200      	movs	r2, #0
 80038ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038f6:	4622      	mov	r2, r4
 80038f8:	462b      	mov	r3, r5
 80038fa:	1891      	adds	r1, r2, r2
 80038fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038fe:	415b      	adcs	r3, r3
 8003900:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003902:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003906:	4621      	mov	r1, r4
 8003908:	eb12 0801 	adds.w	r8, r2, r1
 800390c:	4629      	mov	r1, r5
 800390e:	eb43 0901 	adc.w	r9, r3, r1
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800391e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003926:	4690      	mov	r8, r2
 8003928:	4699      	mov	r9, r3
 800392a:	4623      	mov	r3, r4
 800392c:	eb18 0303 	adds.w	r3, r8, r3
 8003930:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003934:	462b      	mov	r3, r5
 8003936:	eb49 0303 	adc.w	r3, r9, r3
 800393a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800394a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800394e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003952:	460b      	mov	r3, r1
 8003954:	18db      	adds	r3, r3, r3
 8003956:	653b      	str	r3, [r7, #80]	@ 0x50
 8003958:	4613      	mov	r3, r2
 800395a:	eb42 0303 	adc.w	r3, r2, r3
 800395e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003960:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003964:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003968:	f7fc ffe0 	bl	800092c <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4b61      	ldr	r3, [pc, #388]	@ (8003af8 <UART_SetConfig+0x2d4>)
 8003972:	fba3 2302 	umull	r2, r3, r3, r2
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	011c      	lsls	r4, r3, #4
 800397a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800397e:	2200      	movs	r2, #0
 8003980:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003984:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003988:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800398c:	4642      	mov	r2, r8
 800398e:	464b      	mov	r3, r9
 8003990:	1891      	adds	r1, r2, r2
 8003992:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003994:	415b      	adcs	r3, r3
 8003996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003998:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800399c:	4641      	mov	r1, r8
 800399e:	eb12 0a01 	adds.w	sl, r2, r1
 80039a2:	4649      	mov	r1, r9
 80039a4:	eb43 0b01 	adc.w	fp, r3, r1
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039bc:	4692      	mov	sl, r2
 80039be:	469b      	mov	fp, r3
 80039c0:	4643      	mov	r3, r8
 80039c2:	eb1a 0303 	adds.w	r3, sl, r3
 80039c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039ca:	464b      	mov	r3, r9
 80039cc:	eb4b 0303 	adc.w	r3, fp, r3
 80039d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039e8:	460b      	mov	r3, r1
 80039ea:	18db      	adds	r3, r3, r3
 80039ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ee:	4613      	mov	r3, r2
 80039f0:	eb42 0303 	adc.w	r3, r2, r3
 80039f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039fe:	f7fc ff95 	bl	800092c <__aeabi_uldivmod>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	4b3b      	ldr	r3, [pc, #236]	@ (8003af8 <UART_SetConfig+0x2d4>)
 8003a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	2264      	movs	r2, #100	@ 0x64
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	1acb      	subs	r3, r1, r3
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a1e:	4b36      	ldr	r3, [pc, #216]	@ (8003af8 <UART_SetConfig+0x2d4>)
 8003a20:	fba3 2302 	umull	r2, r3, r3, r2
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a2c:	441c      	add	r4, r3
 8003a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a40:	4642      	mov	r2, r8
 8003a42:	464b      	mov	r3, r9
 8003a44:	1891      	adds	r1, r2, r2
 8003a46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a48:	415b      	adcs	r3, r3
 8003a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a50:	4641      	mov	r1, r8
 8003a52:	1851      	adds	r1, r2, r1
 8003a54:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a56:	4649      	mov	r1, r9
 8003a58:	414b      	adcs	r3, r1
 8003a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a68:	4659      	mov	r1, fp
 8003a6a:	00cb      	lsls	r3, r1, #3
 8003a6c:	4651      	mov	r1, sl
 8003a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a72:	4651      	mov	r1, sl
 8003a74:	00ca      	lsls	r2, r1, #3
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4642      	mov	r2, r8
 8003a7e:	189b      	adds	r3, r3, r2
 8003a80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a84:	464b      	mov	r3, r9
 8003a86:	460a      	mov	r2, r1
 8003a88:	eb42 0303 	adc.w	r3, r2, r3
 8003a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003aa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	18db      	adds	r3, r3, r3
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aaa:	4613      	mov	r3, r2
 8003aac:	eb42 0303 	adc.w	r3, r2, r3
 8003ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ab6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003aba:	f7fc ff37 	bl	800092c <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8003af8 <UART_SetConfig+0x2d4>)
 8003ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	2164      	movs	r1, #100	@ 0x64
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	3332      	adds	r3, #50	@ 0x32
 8003ad6:	4a08      	ldr	r2, [pc, #32]	@ (8003af8 <UART_SetConfig+0x2d4>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	f003 0207 	and.w	r2, r3, #7
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4422      	add	r2, r4
 8003aea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aec:	e106      	b.n	8003cfc <UART_SetConfig+0x4d8>
 8003aee:	bf00      	nop
 8003af0:	40011000 	.word	0x40011000
 8003af4:	40011400 	.word	0x40011400
 8003af8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b00:	2200      	movs	r2, #0
 8003b02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b0e:	4642      	mov	r2, r8
 8003b10:	464b      	mov	r3, r9
 8003b12:	1891      	adds	r1, r2, r2
 8003b14:	6239      	str	r1, [r7, #32]
 8003b16:	415b      	adcs	r3, r3
 8003b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b1e:	4641      	mov	r1, r8
 8003b20:	1854      	adds	r4, r2, r1
 8003b22:	4649      	mov	r1, r9
 8003b24:	eb43 0501 	adc.w	r5, r3, r1
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	00eb      	lsls	r3, r5, #3
 8003b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b36:	00e2      	lsls	r2, r4, #3
 8003b38:	4614      	mov	r4, r2
 8003b3a:	461d      	mov	r5, r3
 8003b3c:	4643      	mov	r3, r8
 8003b3e:	18e3      	adds	r3, r4, r3
 8003b40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b44:	464b      	mov	r3, r9
 8003b46:	eb45 0303 	adc.w	r3, r5, r3
 8003b4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	008b      	lsls	r3, r1, #2
 8003b6e:	4621      	mov	r1, r4
 8003b70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b74:	4621      	mov	r1, r4
 8003b76:	008a      	lsls	r2, r1, #2
 8003b78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b7c:	f7fc fed6 	bl	800092c <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4b60      	ldr	r3, [pc, #384]	@ (8003d08 <UART_SetConfig+0x4e4>)
 8003b86:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	011c      	lsls	r4, r3, #4
 8003b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	1891      	adds	r1, r2, r2
 8003ba6:	61b9      	str	r1, [r7, #24]
 8003ba8:	415b      	adcs	r3, r3
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	1851      	adds	r1, r2, r1
 8003bb4:	6139      	str	r1, [r7, #16]
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	414b      	adcs	r3, r1
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bc8:	4659      	mov	r1, fp
 8003bca:	00cb      	lsls	r3, r1, #3
 8003bcc:	4651      	mov	r1, sl
 8003bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bd2:	4651      	mov	r1, sl
 8003bd4:	00ca      	lsls	r2, r1, #3
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4603      	mov	r3, r0
 8003bdc:	4642      	mov	r2, r8
 8003bde:	189b      	adds	r3, r3, r2
 8003be0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003be4:	464b      	mov	r3, r9
 8003be6:	460a      	mov	r2, r1
 8003be8:	eb42 0303 	adc.w	r3, r2, r3
 8003bec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c08:	4649      	mov	r1, r9
 8003c0a:	008b      	lsls	r3, r1, #2
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c12:	4641      	mov	r1, r8
 8003c14:	008a      	lsls	r2, r1, #2
 8003c16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c1a:	f7fc fe87 	bl	800092c <__aeabi_uldivmod>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4611      	mov	r1, r2
 8003c24:	4b38      	ldr	r3, [pc, #224]	@ (8003d08 <UART_SetConfig+0x4e4>)
 8003c26:	fba3 2301 	umull	r2, r3, r3, r1
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	2264      	movs	r2, #100	@ 0x64
 8003c2e:	fb02 f303 	mul.w	r3, r2, r3
 8003c32:	1acb      	subs	r3, r1, r3
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	3332      	adds	r3, #50	@ 0x32
 8003c38:	4a33      	ldr	r2, [pc, #204]	@ (8003d08 <UART_SetConfig+0x4e4>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c44:	441c      	add	r4, r3
 8003c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	1891      	adds	r1, r2, r2
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	415b      	adcs	r3, r3
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c64:	4641      	mov	r1, r8
 8003c66:	1851      	adds	r1, r2, r1
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	414b      	adcs	r3, r1
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	00cb      	lsls	r3, r1, #3
 8003c80:	4651      	mov	r1, sl
 8003c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c86:	4651      	mov	r1, sl
 8003c88:	00ca      	lsls	r2, r1, #3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4642      	mov	r2, r8
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c96:	464b      	mov	r3, r9
 8003c98:	460a      	mov	r2, r1
 8003c9a:	eb42 0303 	adc.w	r3, r2, r3
 8003c9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003caa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003cb8:	4649      	mov	r1, r9
 8003cba:	008b      	lsls	r3, r1, #2
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	008a      	lsls	r2, r1, #2
 8003cc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003cca:	f7fc fe2f 	bl	800092c <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d08 <UART_SetConfig+0x4e4>)
 8003cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	2164      	movs	r1, #100	@ 0x64
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	3332      	adds	r3, #50	@ 0x32
 8003ce6:	4a08      	ldr	r2, [pc, #32]	@ (8003d08 <UART_SetConfig+0x4e4>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	f003 020f 	and.w	r2, r3, #15
 8003cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4422      	add	r2, r4
 8003cfa:	609a      	str	r2, [r3, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d02:	46bd      	mov	sp, r7
 8003d04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d08:	51eb851f 	.word	0x51eb851f

08003d0c <sniprintf>:
 8003d0c:	b40c      	push	{r2, r3}
 8003d0e:	b530      	push	{r4, r5, lr}
 8003d10:	4b18      	ldr	r3, [pc, #96]	@ (8003d74 <sniprintf+0x68>)
 8003d12:	1e0c      	subs	r4, r1, #0
 8003d14:	681d      	ldr	r5, [r3, #0]
 8003d16:	b09d      	sub	sp, #116	@ 0x74
 8003d18:	da08      	bge.n	8003d2c <sniprintf+0x20>
 8003d1a:	238b      	movs	r3, #139	@ 0x8b
 8003d1c:	602b      	str	r3, [r5, #0]
 8003d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d22:	b01d      	add	sp, #116	@ 0x74
 8003d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d28:	b002      	add	sp, #8
 8003d2a:	4770      	bx	lr
 8003d2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003d30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003d3a:	bf14      	ite	ne
 8003d3c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003d40:	4623      	moveq	r3, r4
 8003d42:	9304      	str	r3, [sp, #16]
 8003d44:	9307      	str	r3, [sp, #28]
 8003d46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d4a:	9002      	str	r0, [sp, #8]
 8003d4c:	9006      	str	r0, [sp, #24]
 8003d4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003d52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003d54:	ab21      	add	r3, sp, #132	@ 0x84
 8003d56:	a902      	add	r1, sp, #8
 8003d58:	4628      	mov	r0, r5
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	f000 f994 	bl	8004088 <_svfiprintf_r>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	bfbc      	itt	lt
 8003d64:	238b      	movlt	r3, #139	@ 0x8b
 8003d66:	602b      	strlt	r3, [r5, #0]
 8003d68:	2c00      	cmp	r4, #0
 8003d6a:	d0da      	beq.n	8003d22 <sniprintf+0x16>
 8003d6c:	9b02      	ldr	r3, [sp, #8]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	e7d6      	b.n	8003d22 <sniprintf+0x16>
 8003d74:	2000000c 	.word	0x2000000c

08003d78 <memset>:
 8003d78:	4402      	add	r2, r0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d100      	bne.n	8003d82 <memset+0xa>
 8003d80:	4770      	bx	lr
 8003d82:	f803 1b01 	strb.w	r1, [r3], #1
 8003d86:	e7f9      	b.n	8003d7c <memset+0x4>

08003d88 <__errno>:
 8003d88:	4b01      	ldr	r3, [pc, #4]	@ (8003d90 <__errno+0x8>)
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	2000000c 	.word	0x2000000c

08003d94 <__libc_init_array>:
 8003d94:	b570      	push	{r4, r5, r6, lr}
 8003d96:	4d0d      	ldr	r5, [pc, #52]	@ (8003dcc <__libc_init_array+0x38>)
 8003d98:	4c0d      	ldr	r4, [pc, #52]	@ (8003dd0 <__libc_init_array+0x3c>)
 8003d9a:	1b64      	subs	r4, r4, r5
 8003d9c:	10a4      	asrs	r4, r4, #2
 8003d9e:	2600      	movs	r6, #0
 8003da0:	42a6      	cmp	r6, r4
 8003da2:	d109      	bne.n	8003db8 <__libc_init_array+0x24>
 8003da4:	4d0b      	ldr	r5, [pc, #44]	@ (8003dd4 <__libc_init_array+0x40>)
 8003da6:	4c0c      	ldr	r4, [pc, #48]	@ (8003dd8 <__libc_init_array+0x44>)
 8003da8:	f000 fc64 	bl	8004674 <_init>
 8003dac:	1b64      	subs	r4, r4, r5
 8003dae:	10a4      	asrs	r4, r4, #2
 8003db0:	2600      	movs	r6, #0
 8003db2:	42a6      	cmp	r6, r4
 8003db4:	d105      	bne.n	8003dc2 <__libc_init_array+0x2e>
 8003db6:	bd70      	pop	{r4, r5, r6, pc}
 8003db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dbc:	4798      	blx	r3
 8003dbe:	3601      	adds	r6, #1
 8003dc0:	e7ee      	b.n	8003da0 <__libc_init_array+0xc>
 8003dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc6:	4798      	blx	r3
 8003dc8:	3601      	adds	r6, #1
 8003dca:	e7f2      	b.n	8003db2 <__libc_init_array+0x1e>
 8003dcc:	08004704 	.word	0x08004704
 8003dd0:	08004704 	.word	0x08004704
 8003dd4:	08004704 	.word	0x08004704
 8003dd8:	08004708 	.word	0x08004708

08003ddc <__retarget_lock_acquire_recursive>:
 8003ddc:	4770      	bx	lr

08003dde <__retarget_lock_release_recursive>:
 8003dde:	4770      	bx	lr

08003de0 <_free_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4605      	mov	r5, r0
 8003de4:	2900      	cmp	r1, #0
 8003de6:	d041      	beq.n	8003e6c <_free_r+0x8c>
 8003de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dec:	1f0c      	subs	r4, r1, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bfb8      	it	lt
 8003df2:	18e4      	addlt	r4, r4, r3
 8003df4:	f000 f8e0 	bl	8003fb8 <__malloc_lock>
 8003df8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e70 <_free_r+0x90>)
 8003dfa:	6813      	ldr	r3, [r2, #0]
 8003dfc:	b933      	cbnz	r3, 8003e0c <_free_r+0x2c>
 8003dfe:	6063      	str	r3, [r4, #4]
 8003e00:	6014      	str	r4, [r2, #0]
 8003e02:	4628      	mov	r0, r5
 8003e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e08:	f000 b8dc 	b.w	8003fc4 <__malloc_unlock>
 8003e0c:	42a3      	cmp	r3, r4
 8003e0e:	d908      	bls.n	8003e22 <_free_r+0x42>
 8003e10:	6820      	ldr	r0, [r4, #0]
 8003e12:	1821      	adds	r1, r4, r0
 8003e14:	428b      	cmp	r3, r1
 8003e16:	bf01      	itttt	eq
 8003e18:	6819      	ldreq	r1, [r3, #0]
 8003e1a:	685b      	ldreq	r3, [r3, #4]
 8003e1c:	1809      	addeq	r1, r1, r0
 8003e1e:	6021      	streq	r1, [r4, #0]
 8003e20:	e7ed      	b.n	8003dfe <_free_r+0x1e>
 8003e22:	461a      	mov	r2, r3
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	b10b      	cbz	r3, 8003e2c <_free_r+0x4c>
 8003e28:	42a3      	cmp	r3, r4
 8003e2a:	d9fa      	bls.n	8003e22 <_free_r+0x42>
 8003e2c:	6811      	ldr	r1, [r2, #0]
 8003e2e:	1850      	adds	r0, r2, r1
 8003e30:	42a0      	cmp	r0, r4
 8003e32:	d10b      	bne.n	8003e4c <_free_r+0x6c>
 8003e34:	6820      	ldr	r0, [r4, #0]
 8003e36:	4401      	add	r1, r0
 8003e38:	1850      	adds	r0, r2, r1
 8003e3a:	4283      	cmp	r3, r0
 8003e3c:	6011      	str	r1, [r2, #0]
 8003e3e:	d1e0      	bne.n	8003e02 <_free_r+0x22>
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	6053      	str	r3, [r2, #4]
 8003e46:	4408      	add	r0, r1
 8003e48:	6010      	str	r0, [r2, #0]
 8003e4a:	e7da      	b.n	8003e02 <_free_r+0x22>
 8003e4c:	d902      	bls.n	8003e54 <_free_r+0x74>
 8003e4e:	230c      	movs	r3, #12
 8003e50:	602b      	str	r3, [r5, #0]
 8003e52:	e7d6      	b.n	8003e02 <_free_r+0x22>
 8003e54:	6820      	ldr	r0, [r4, #0]
 8003e56:	1821      	adds	r1, r4, r0
 8003e58:	428b      	cmp	r3, r1
 8003e5a:	bf04      	itt	eq
 8003e5c:	6819      	ldreq	r1, [r3, #0]
 8003e5e:	685b      	ldreq	r3, [r3, #4]
 8003e60:	6063      	str	r3, [r4, #4]
 8003e62:	bf04      	itt	eq
 8003e64:	1809      	addeq	r1, r1, r0
 8003e66:	6021      	streq	r1, [r4, #0]
 8003e68:	6054      	str	r4, [r2, #4]
 8003e6a:	e7ca      	b.n	8003e02 <_free_r+0x22>
 8003e6c:	bd38      	pop	{r3, r4, r5, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000260 	.word	0x20000260

08003e74 <sbrk_aligned>:
 8003e74:	b570      	push	{r4, r5, r6, lr}
 8003e76:	4e0f      	ldr	r6, [pc, #60]	@ (8003eb4 <sbrk_aligned+0x40>)
 8003e78:	460c      	mov	r4, r1
 8003e7a:	6831      	ldr	r1, [r6, #0]
 8003e7c:	4605      	mov	r5, r0
 8003e7e:	b911      	cbnz	r1, 8003e86 <sbrk_aligned+0x12>
 8003e80:	f000 fba4 	bl	80045cc <_sbrk_r>
 8003e84:	6030      	str	r0, [r6, #0]
 8003e86:	4621      	mov	r1, r4
 8003e88:	4628      	mov	r0, r5
 8003e8a:	f000 fb9f 	bl	80045cc <_sbrk_r>
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	d103      	bne.n	8003e9a <sbrk_aligned+0x26>
 8003e92:	f04f 34ff 	mov.w	r4, #4294967295
 8003e96:	4620      	mov	r0, r4
 8003e98:	bd70      	pop	{r4, r5, r6, pc}
 8003e9a:	1cc4      	adds	r4, r0, #3
 8003e9c:	f024 0403 	bic.w	r4, r4, #3
 8003ea0:	42a0      	cmp	r0, r4
 8003ea2:	d0f8      	beq.n	8003e96 <sbrk_aligned+0x22>
 8003ea4:	1a21      	subs	r1, r4, r0
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f000 fb90 	bl	80045cc <_sbrk_r>
 8003eac:	3001      	adds	r0, #1
 8003eae:	d1f2      	bne.n	8003e96 <sbrk_aligned+0x22>
 8003eb0:	e7ef      	b.n	8003e92 <sbrk_aligned+0x1e>
 8003eb2:	bf00      	nop
 8003eb4:	2000025c 	.word	0x2000025c

08003eb8 <_malloc_r>:
 8003eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ebc:	1ccd      	adds	r5, r1, #3
 8003ebe:	f025 0503 	bic.w	r5, r5, #3
 8003ec2:	3508      	adds	r5, #8
 8003ec4:	2d0c      	cmp	r5, #12
 8003ec6:	bf38      	it	cc
 8003ec8:	250c      	movcc	r5, #12
 8003eca:	2d00      	cmp	r5, #0
 8003ecc:	4606      	mov	r6, r0
 8003ece:	db01      	blt.n	8003ed4 <_malloc_r+0x1c>
 8003ed0:	42a9      	cmp	r1, r5
 8003ed2:	d904      	bls.n	8003ede <_malloc_r+0x26>
 8003ed4:	230c      	movs	r3, #12
 8003ed6:	6033      	str	r3, [r6, #0]
 8003ed8:	2000      	movs	r0, #0
 8003eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ede:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003fb4 <_malloc_r+0xfc>
 8003ee2:	f000 f869 	bl	8003fb8 <__malloc_lock>
 8003ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8003eea:	461c      	mov	r4, r3
 8003eec:	bb44      	cbnz	r4, 8003f40 <_malloc_r+0x88>
 8003eee:	4629      	mov	r1, r5
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	f7ff ffbf 	bl	8003e74 <sbrk_aligned>
 8003ef6:	1c43      	adds	r3, r0, #1
 8003ef8:	4604      	mov	r4, r0
 8003efa:	d158      	bne.n	8003fae <_malloc_r+0xf6>
 8003efc:	f8d8 4000 	ldr.w	r4, [r8]
 8003f00:	4627      	mov	r7, r4
 8003f02:	2f00      	cmp	r7, #0
 8003f04:	d143      	bne.n	8003f8e <_malloc_r+0xd6>
 8003f06:	2c00      	cmp	r4, #0
 8003f08:	d04b      	beq.n	8003fa2 <_malloc_r+0xea>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	4639      	mov	r1, r7
 8003f0e:	4630      	mov	r0, r6
 8003f10:	eb04 0903 	add.w	r9, r4, r3
 8003f14:	f000 fb5a 	bl	80045cc <_sbrk_r>
 8003f18:	4581      	cmp	r9, r0
 8003f1a:	d142      	bne.n	8003fa2 <_malloc_r+0xea>
 8003f1c:	6821      	ldr	r1, [r4, #0]
 8003f1e:	1a6d      	subs	r5, r5, r1
 8003f20:	4629      	mov	r1, r5
 8003f22:	4630      	mov	r0, r6
 8003f24:	f7ff ffa6 	bl	8003e74 <sbrk_aligned>
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d03a      	beq.n	8003fa2 <_malloc_r+0xea>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	442b      	add	r3, r5
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	f8d8 3000 	ldr.w	r3, [r8]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	bb62      	cbnz	r2, 8003f94 <_malloc_r+0xdc>
 8003f3a:	f8c8 7000 	str.w	r7, [r8]
 8003f3e:	e00f      	b.n	8003f60 <_malloc_r+0xa8>
 8003f40:	6822      	ldr	r2, [r4, #0]
 8003f42:	1b52      	subs	r2, r2, r5
 8003f44:	d420      	bmi.n	8003f88 <_malloc_r+0xd0>
 8003f46:	2a0b      	cmp	r2, #11
 8003f48:	d917      	bls.n	8003f7a <_malloc_r+0xc2>
 8003f4a:	1961      	adds	r1, r4, r5
 8003f4c:	42a3      	cmp	r3, r4
 8003f4e:	6025      	str	r5, [r4, #0]
 8003f50:	bf18      	it	ne
 8003f52:	6059      	strne	r1, [r3, #4]
 8003f54:	6863      	ldr	r3, [r4, #4]
 8003f56:	bf08      	it	eq
 8003f58:	f8c8 1000 	streq.w	r1, [r8]
 8003f5c:	5162      	str	r2, [r4, r5]
 8003f5e:	604b      	str	r3, [r1, #4]
 8003f60:	4630      	mov	r0, r6
 8003f62:	f000 f82f 	bl	8003fc4 <__malloc_unlock>
 8003f66:	f104 000b 	add.w	r0, r4, #11
 8003f6a:	1d23      	adds	r3, r4, #4
 8003f6c:	f020 0007 	bic.w	r0, r0, #7
 8003f70:	1ac2      	subs	r2, r0, r3
 8003f72:	bf1c      	itt	ne
 8003f74:	1a1b      	subne	r3, r3, r0
 8003f76:	50a3      	strne	r3, [r4, r2]
 8003f78:	e7af      	b.n	8003eda <_malloc_r+0x22>
 8003f7a:	6862      	ldr	r2, [r4, #4]
 8003f7c:	42a3      	cmp	r3, r4
 8003f7e:	bf0c      	ite	eq
 8003f80:	f8c8 2000 	streq.w	r2, [r8]
 8003f84:	605a      	strne	r2, [r3, #4]
 8003f86:	e7eb      	b.n	8003f60 <_malloc_r+0xa8>
 8003f88:	4623      	mov	r3, r4
 8003f8a:	6864      	ldr	r4, [r4, #4]
 8003f8c:	e7ae      	b.n	8003eec <_malloc_r+0x34>
 8003f8e:	463c      	mov	r4, r7
 8003f90:	687f      	ldr	r7, [r7, #4]
 8003f92:	e7b6      	b.n	8003f02 <_malloc_r+0x4a>
 8003f94:	461a      	mov	r2, r3
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	42a3      	cmp	r3, r4
 8003f9a:	d1fb      	bne.n	8003f94 <_malloc_r+0xdc>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	6053      	str	r3, [r2, #4]
 8003fa0:	e7de      	b.n	8003f60 <_malloc_r+0xa8>
 8003fa2:	230c      	movs	r3, #12
 8003fa4:	6033      	str	r3, [r6, #0]
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f000 f80c 	bl	8003fc4 <__malloc_unlock>
 8003fac:	e794      	b.n	8003ed8 <_malloc_r+0x20>
 8003fae:	6005      	str	r5, [r0, #0]
 8003fb0:	e7d6      	b.n	8003f60 <_malloc_r+0xa8>
 8003fb2:	bf00      	nop
 8003fb4:	20000260 	.word	0x20000260

08003fb8 <__malloc_lock>:
 8003fb8:	4801      	ldr	r0, [pc, #4]	@ (8003fc0 <__malloc_lock+0x8>)
 8003fba:	f7ff bf0f 	b.w	8003ddc <__retarget_lock_acquire_recursive>
 8003fbe:	bf00      	nop
 8003fc0:	20000258 	.word	0x20000258

08003fc4 <__malloc_unlock>:
 8003fc4:	4801      	ldr	r0, [pc, #4]	@ (8003fcc <__malloc_unlock+0x8>)
 8003fc6:	f7ff bf0a 	b.w	8003dde <__retarget_lock_release_recursive>
 8003fca:	bf00      	nop
 8003fcc:	20000258 	.word	0x20000258

08003fd0 <__ssputs_r>:
 8003fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd4:	688e      	ldr	r6, [r1, #8]
 8003fd6:	461f      	mov	r7, r3
 8003fd8:	42be      	cmp	r6, r7
 8003fda:	680b      	ldr	r3, [r1, #0]
 8003fdc:	4682      	mov	sl, r0
 8003fde:	460c      	mov	r4, r1
 8003fe0:	4690      	mov	r8, r2
 8003fe2:	d82d      	bhi.n	8004040 <__ssputs_r+0x70>
 8003fe4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003fe8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003fec:	d026      	beq.n	800403c <__ssputs_r+0x6c>
 8003fee:	6965      	ldr	r5, [r4, #20]
 8003ff0:	6909      	ldr	r1, [r1, #16]
 8003ff2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ff6:	eba3 0901 	sub.w	r9, r3, r1
 8003ffa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ffe:	1c7b      	adds	r3, r7, #1
 8004000:	444b      	add	r3, r9
 8004002:	106d      	asrs	r5, r5, #1
 8004004:	429d      	cmp	r5, r3
 8004006:	bf38      	it	cc
 8004008:	461d      	movcc	r5, r3
 800400a:	0553      	lsls	r3, r2, #21
 800400c:	d527      	bpl.n	800405e <__ssputs_r+0x8e>
 800400e:	4629      	mov	r1, r5
 8004010:	f7ff ff52 	bl	8003eb8 <_malloc_r>
 8004014:	4606      	mov	r6, r0
 8004016:	b360      	cbz	r0, 8004072 <__ssputs_r+0xa2>
 8004018:	6921      	ldr	r1, [r4, #16]
 800401a:	464a      	mov	r2, r9
 800401c:	f000 fae6 	bl	80045ec <memcpy>
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800402a:	81a3      	strh	r3, [r4, #12]
 800402c:	6126      	str	r6, [r4, #16]
 800402e:	6165      	str	r5, [r4, #20]
 8004030:	444e      	add	r6, r9
 8004032:	eba5 0509 	sub.w	r5, r5, r9
 8004036:	6026      	str	r6, [r4, #0]
 8004038:	60a5      	str	r5, [r4, #8]
 800403a:	463e      	mov	r6, r7
 800403c:	42be      	cmp	r6, r7
 800403e:	d900      	bls.n	8004042 <__ssputs_r+0x72>
 8004040:	463e      	mov	r6, r7
 8004042:	6820      	ldr	r0, [r4, #0]
 8004044:	4632      	mov	r2, r6
 8004046:	4641      	mov	r1, r8
 8004048:	f000 faa6 	bl	8004598 <memmove>
 800404c:	68a3      	ldr	r3, [r4, #8]
 800404e:	1b9b      	subs	r3, r3, r6
 8004050:	60a3      	str	r3, [r4, #8]
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	4433      	add	r3, r6
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	2000      	movs	r0, #0
 800405a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800405e:	462a      	mov	r2, r5
 8004060:	f000 fad2 	bl	8004608 <_realloc_r>
 8004064:	4606      	mov	r6, r0
 8004066:	2800      	cmp	r0, #0
 8004068:	d1e0      	bne.n	800402c <__ssputs_r+0x5c>
 800406a:	6921      	ldr	r1, [r4, #16]
 800406c:	4650      	mov	r0, sl
 800406e:	f7ff feb7 	bl	8003de0 <_free_r>
 8004072:	230c      	movs	r3, #12
 8004074:	f8ca 3000 	str.w	r3, [sl]
 8004078:	89a3      	ldrh	r3, [r4, #12]
 800407a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800407e:	81a3      	strh	r3, [r4, #12]
 8004080:	f04f 30ff 	mov.w	r0, #4294967295
 8004084:	e7e9      	b.n	800405a <__ssputs_r+0x8a>
	...

08004088 <_svfiprintf_r>:
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408c:	4698      	mov	r8, r3
 800408e:	898b      	ldrh	r3, [r1, #12]
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	b09d      	sub	sp, #116	@ 0x74
 8004094:	4607      	mov	r7, r0
 8004096:	460d      	mov	r5, r1
 8004098:	4614      	mov	r4, r2
 800409a:	d510      	bpl.n	80040be <_svfiprintf_r+0x36>
 800409c:	690b      	ldr	r3, [r1, #16]
 800409e:	b973      	cbnz	r3, 80040be <_svfiprintf_r+0x36>
 80040a0:	2140      	movs	r1, #64	@ 0x40
 80040a2:	f7ff ff09 	bl	8003eb8 <_malloc_r>
 80040a6:	6028      	str	r0, [r5, #0]
 80040a8:	6128      	str	r0, [r5, #16]
 80040aa:	b930      	cbnz	r0, 80040ba <_svfiprintf_r+0x32>
 80040ac:	230c      	movs	r3, #12
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295
 80040b4:	b01d      	add	sp, #116	@ 0x74
 80040b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ba:	2340      	movs	r3, #64	@ 0x40
 80040bc:	616b      	str	r3, [r5, #20]
 80040be:	2300      	movs	r3, #0
 80040c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80040c2:	2320      	movs	r3, #32
 80040c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80040cc:	2330      	movs	r3, #48	@ 0x30
 80040ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800426c <_svfiprintf_r+0x1e4>
 80040d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040d6:	f04f 0901 	mov.w	r9, #1
 80040da:	4623      	mov	r3, r4
 80040dc:	469a      	mov	sl, r3
 80040de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040e2:	b10a      	cbz	r2, 80040e8 <_svfiprintf_r+0x60>
 80040e4:	2a25      	cmp	r2, #37	@ 0x25
 80040e6:	d1f9      	bne.n	80040dc <_svfiprintf_r+0x54>
 80040e8:	ebba 0b04 	subs.w	fp, sl, r4
 80040ec:	d00b      	beq.n	8004106 <_svfiprintf_r+0x7e>
 80040ee:	465b      	mov	r3, fp
 80040f0:	4622      	mov	r2, r4
 80040f2:	4629      	mov	r1, r5
 80040f4:	4638      	mov	r0, r7
 80040f6:	f7ff ff6b 	bl	8003fd0 <__ssputs_r>
 80040fa:	3001      	adds	r0, #1
 80040fc:	f000 80a7 	beq.w	800424e <_svfiprintf_r+0x1c6>
 8004100:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004102:	445a      	add	r2, fp
 8004104:	9209      	str	r2, [sp, #36]	@ 0x24
 8004106:	f89a 3000 	ldrb.w	r3, [sl]
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 809f 	beq.w	800424e <_svfiprintf_r+0x1c6>
 8004110:	2300      	movs	r3, #0
 8004112:	f04f 32ff 	mov.w	r2, #4294967295
 8004116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800411a:	f10a 0a01 	add.w	sl, sl, #1
 800411e:	9304      	str	r3, [sp, #16]
 8004120:	9307      	str	r3, [sp, #28]
 8004122:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004126:	931a      	str	r3, [sp, #104]	@ 0x68
 8004128:	4654      	mov	r4, sl
 800412a:	2205      	movs	r2, #5
 800412c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004130:	484e      	ldr	r0, [pc, #312]	@ (800426c <_svfiprintf_r+0x1e4>)
 8004132:	f7fc f875 	bl	8000220 <memchr>
 8004136:	9a04      	ldr	r2, [sp, #16]
 8004138:	b9d8      	cbnz	r0, 8004172 <_svfiprintf_r+0xea>
 800413a:	06d0      	lsls	r0, r2, #27
 800413c:	bf44      	itt	mi
 800413e:	2320      	movmi	r3, #32
 8004140:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004144:	0711      	lsls	r1, r2, #28
 8004146:	bf44      	itt	mi
 8004148:	232b      	movmi	r3, #43	@ 0x2b
 800414a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800414e:	f89a 3000 	ldrb.w	r3, [sl]
 8004152:	2b2a      	cmp	r3, #42	@ 0x2a
 8004154:	d015      	beq.n	8004182 <_svfiprintf_r+0xfa>
 8004156:	9a07      	ldr	r2, [sp, #28]
 8004158:	4654      	mov	r4, sl
 800415a:	2000      	movs	r0, #0
 800415c:	f04f 0c0a 	mov.w	ip, #10
 8004160:	4621      	mov	r1, r4
 8004162:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004166:	3b30      	subs	r3, #48	@ 0x30
 8004168:	2b09      	cmp	r3, #9
 800416a:	d94b      	bls.n	8004204 <_svfiprintf_r+0x17c>
 800416c:	b1b0      	cbz	r0, 800419c <_svfiprintf_r+0x114>
 800416e:	9207      	str	r2, [sp, #28]
 8004170:	e014      	b.n	800419c <_svfiprintf_r+0x114>
 8004172:	eba0 0308 	sub.w	r3, r0, r8
 8004176:	fa09 f303 	lsl.w	r3, r9, r3
 800417a:	4313      	orrs	r3, r2
 800417c:	9304      	str	r3, [sp, #16]
 800417e:	46a2      	mov	sl, r4
 8004180:	e7d2      	b.n	8004128 <_svfiprintf_r+0xa0>
 8004182:	9b03      	ldr	r3, [sp, #12]
 8004184:	1d19      	adds	r1, r3, #4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	9103      	str	r1, [sp, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	bfbb      	ittet	lt
 800418e:	425b      	neglt	r3, r3
 8004190:	f042 0202 	orrlt.w	r2, r2, #2
 8004194:	9307      	strge	r3, [sp, #28]
 8004196:	9307      	strlt	r3, [sp, #28]
 8004198:	bfb8      	it	lt
 800419a:	9204      	strlt	r2, [sp, #16]
 800419c:	7823      	ldrb	r3, [r4, #0]
 800419e:	2b2e      	cmp	r3, #46	@ 0x2e
 80041a0:	d10a      	bne.n	80041b8 <_svfiprintf_r+0x130>
 80041a2:	7863      	ldrb	r3, [r4, #1]
 80041a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80041a6:	d132      	bne.n	800420e <_svfiprintf_r+0x186>
 80041a8:	9b03      	ldr	r3, [sp, #12]
 80041aa:	1d1a      	adds	r2, r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	9203      	str	r2, [sp, #12]
 80041b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80041b4:	3402      	adds	r4, #2
 80041b6:	9305      	str	r3, [sp, #20]
 80041b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800427c <_svfiprintf_r+0x1f4>
 80041bc:	7821      	ldrb	r1, [r4, #0]
 80041be:	2203      	movs	r2, #3
 80041c0:	4650      	mov	r0, sl
 80041c2:	f7fc f82d 	bl	8000220 <memchr>
 80041c6:	b138      	cbz	r0, 80041d8 <_svfiprintf_r+0x150>
 80041c8:	9b04      	ldr	r3, [sp, #16]
 80041ca:	eba0 000a 	sub.w	r0, r0, sl
 80041ce:	2240      	movs	r2, #64	@ 0x40
 80041d0:	4082      	lsls	r2, r0
 80041d2:	4313      	orrs	r3, r2
 80041d4:	3401      	adds	r4, #1
 80041d6:	9304      	str	r3, [sp, #16]
 80041d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041dc:	4824      	ldr	r0, [pc, #144]	@ (8004270 <_svfiprintf_r+0x1e8>)
 80041de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041e2:	2206      	movs	r2, #6
 80041e4:	f7fc f81c 	bl	8000220 <memchr>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d036      	beq.n	800425a <_svfiprintf_r+0x1d2>
 80041ec:	4b21      	ldr	r3, [pc, #132]	@ (8004274 <_svfiprintf_r+0x1ec>)
 80041ee:	bb1b      	cbnz	r3, 8004238 <_svfiprintf_r+0x1b0>
 80041f0:	9b03      	ldr	r3, [sp, #12]
 80041f2:	3307      	adds	r3, #7
 80041f4:	f023 0307 	bic.w	r3, r3, #7
 80041f8:	3308      	adds	r3, #8
 80041fa:	9303      	str	r3, [sp, #12]
 80041fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041fe:	4433      	add	r3, r6
 8004200:	9309      	str	r3, [sp, #36]	@ 0x24
 8004202:	e76a      	b.n	80040da <_svfiprintf_r+0x52>
 8004204:	fb0c 3202 	mla	r2, ip, r2, r3
 8004208:	460c      	mov	r4, r1
 800420a:	2001      	movs	r0, #1
 800420c:	e7a8      	b.n	8004160 <_svfiprintf_r+0xd8>
 800420e:	2300      	movs	r3, #0
 8004210:	3401      	adds	r4, #1
 8004212:	9305      	str	r3, [sp, #20]
 8004214:	4619      	mov	r1, r3
 8004216:	f04f 0c0a 	mov.w	ip, #10
 800421a:	4620      	mov	r0, r4
 800421c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004220:	3a30      	subs	r2, #48	@ 0x30
 8004222:	2a09      	cmp	r2, #9
 8004224:	d903      	bls.n	800422e <_svfiprintf_r+0x1a6>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0c6      	beq.n	80041b8 <_svfiprintf_r+0x130>
 800422a:	9105      	str	r1, [sp, #20]
 800422c:	e7c4      	b.n	80041b8 <_svfiprintf_r+0x130>
 800422e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004232:	4604      	mov	r4, r0
 8004234:	2301      	movs	r3, #1
 8004236:	e7f0      	b.n	800421a <_svfiprintf_r+0x192>
 8004238:	ab03      	add	r3, sp, #12
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	462a      	mov	r2, r5
 800423e:	4b0e      	ldr	r3, [pc, #56]	@ (8004278 <_svfiprintf_r+0x1f0>)
 8004240:	a904      	add	r1, sp, #16
 8004242:	4638      	mov	r0, r7
 8004244:	f3af 8000 	nop.w
 8004248:	1c42      	adds	r2, r0, #1
 800424a:	4606      	mov	r6, r0
 800424c:	d1d6      	bne.n	80041fc <_svfiprintf_r+0x174>
 800424e:	89ab      	ldrh	r3, [r5, #12]
 8004250:	065b      	lsls	r3, r3, #25
 8004252:	f53f af2d 	bmi.w	80040b0 <_svfiprintf_r+0x28>
 8004256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004258:	e72c      	b.n	80040b4 <_svfiprintf_r+0x2c>
 800425a:	ab03      	add	r3, sp, #12
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	462a      	mov	r2, r5
 8004260:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <_svfiprintf_r+0x1f0>)
 8004262:	a904      	add	r1, sp, #16
 8004264:	4638      	mov	r0, r7
 8004266:	f000 f879 	bl	800435c <_printf_i>
 800426a:	e7ed      	b.n	8004248 <_svfiprintf_r+0x1c0>
 800426c:	080046c8 	.word	0x080046c8
 8004270:	080046d2 	.word	0x080046d2
 8004274:	00000000 	.word	0x00000000
 8004278:	08003fd1 	.word	0x08003fd1
 800427c:	080046ce 	.word	0x080046ce

08004280 <_printf_common>:
 8004280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004284:	4616      	mov	r6, r2
 8004286:	4698      	mov	r8, r3
 8004288:	688a      	ldr	r2, [r1, #8]
 800428a:	690b      	ldr	r3, [r1, #16]
 800428c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004290:	4293      	cmp	r3, r2
 8004292:	bfb8      	it	lt
 8004294:	4613      	movlt	r3, r2
 8004296:	6033      	str	r3, [r6, #0]
 8004298:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800429c:	4607      	mov	r7, r0
 800429e:	460c      	mov	r4, r1
 80042a0:	b10a      	cbz	r2, 80042a6 <_printf_common+0x26>
 80042a2:	3301      	adds	r3, #1
 80042a4:	6033      	str	r3, [r6, #0]
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	0699      	lsls	r1, r3, #26
 80042aa:	bf42      	ittt	mi
 80042ac:	6833      	ldrmi	r3, [r6, #0]
 80042ae:	3302      	addmi	r3, #2
 80042b0:	6033      	strmi	r3, [r6, #0]
 80042b2:	6825      	ldr	r5, [r4, #0]
 80042b4:	f015 0506 	ands.w	r5, r5, #6
 80042b8:	d106      	bne.n	80042c8 <_printf_common+0x48>
 80042ba:	f104 0a19 	add.w	sl, r4, #25
 80042be:	68e3      	ldr	r3, [r4, #12]
 80042c0:	6832      	ldr	r2, [r6, #0]
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	42ab      	cmp	r3, r5
 80042c6:	dc26      	bgt.n	8004316 <_printf_common+0x96>
 80042c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042cc:	6822      	ldr	r2, [r4, #0]
 80042ce:	3b00      	subs	r3, #0
 80042d0:	bf18      	it	ne
 80042d2:	2301      	movne	r3, #1
 80042d4:	0692      	lsls	r2, r2, #26
 80042d6:	d42b      	bmi.n	8004330 <_printf_common+0xb0>
 80042d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042dc:	4641      	mov	r1, r8
 80042de:	4638      	mov	r0, r7
 80042e0:	47c8      	blx	r9
 80042e2:	3001      	adds	r0, #1
 80042e4:	d01e      	beq.n	8004324 <_printf_common+0xa4>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	6922      	ldr	r2, [r4, #16]
 80042ea:	f003 0306 	and.w	r3, r3, #6
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	bf02      	ittt	eq
 80042f2:	68e5      	ldreq	r5, [r4, #12]
 80042f4:	6833      	ldreq	r3, [r6, #0]
 80042f6:	1aed      	subeq	r5, r5, r3
 80042f8:	68a3      	ldr	r3, [r4, #8]
 80042fa:	bf0c      	ite	eq
 80042fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004300:	2500      	movne	r5, #0
 8004302:	4293      	cmp	r3, r2
 8004304:	bfc4      	itt	gt
 8004306:	1a9b      	subgt	r3, r3, r2
 8004308:	18ed      	addgt	r5, r5, r3
 800430a:	2600      	movs	r6, #0
 800430c:	341a      	adds	r4, #26
 800430e:	42b5      	cmp	r5, r6
 8004310:	d11a      	bne.n	8004348 <_printf_common+0xc8>
 8004312:	2000      	movs	r0, #0
 8004314:	e008      	b.n	8004328 <_printf_common+0xa8>
 8004316:	2301      	movs	r3, #1
 8004318:	4652      	mov	r2, sl
 800431a:	4641      	mov	r1, r8
 800431c:	4638      	mov	r0, r7
 800431e:	47c8      	blx	r9
 8004320:	3001      	adds	r0, #1
 8004322:	d103      	bne.n	800432c <_printf_common+0xac>
 8004324:	f04f 30ff 	mov.w	r0, #4294967295
 8004328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432c:	3501      	adds	r5, #1
 800432e:	e7c6      	b.n	80042be <_printf_common+0x3e>
 8004330:	18e1      	adds	r1, r4, r3
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	2030      	movs	r0, #48	@ 0x30
 8004336:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800433a:	4422      	add	r2, r4
 800433c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004340:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004344:	3302      	adds	r3, #2
 8004346:	e7c7      	b.n	80042d8 <_printf_common+0x58>
 8004348:	2301      	movs	r3, #1
 800434a:	4622      	mov	r2, r4
 800434c:	4641      	mov	r1, r8
 800434e:	4638      	mov	r0, r7
 8004350:	47c8      	blx	r9
 8004352:	3001      	adds	r0, #1
 8004354:	d0e6      	beq.n	8004324 <_printf_common+0xa4>
 8004356:	3601      	adds	r6, #1
 8004358:	e7d9      	b.n	800430e <_printf_common+0x8e>
	...

0800435c <_printf_i>:
 800435c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004360:	7e0f      	ldrb	r7, [r1, #24]
 8004362:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004364:	2f78      	cmp	r7, #120	@ 0x78
 8004366:	4691      	mov	r9, r2
 8004368:	4680      	mov	r8, r0
 800436a:	460c      	mov	r4, r1
 800436c:	469a      	mov	sl, r3
 800436e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004372:	d807      	bhi.n	8004384 <_printf_i+0x28>
 8004374:	2f62      	cmp	r7, #98	@ 0x62
 8004376:	d80a      	bhi.n	800438e <_printf_i+0x32>
 8004378:	2f00      	cmp	r7, #0
 800437a:	f000 80d1 	beq.w	8004520 <_printf_i+0x1c4>
 800437e:	2f58      	cmp	r7, #88	@ 0x58
 8004380:	f000 80b8 	beq.w	80044f4 <_printf_i+0x198>
 8004384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004388:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800438c:	e03a      	b.n	8004404 <_printf_i+0xa8>
 800438e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004392:	2b15      	cmp	r3, #21
 8004394:	d8f6      	bhi.n	8004384 <_printf_i+0x28>
 8004396:	a101      	add	r1, pc, #4	@ (adr r1, 800439c <_printf_i+0x40>)
 8004398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800439c:	080043f5 	.word	0x080043f5
 80043a0:	08004409 	.word	0x08004409
 80043a4:	08004385 	.word	0x08004385
 80043a8:	08004385 	.word	0x08004385
 80043ac:	08004385 	.word	0x08004385
 80043b0:	08004385 	.word	0x08004385
 80043b4:	08004409 	.word	0x08004409
 80043b8:	08004385 	.word	0x08004385
 80043bc:	08004385 	.word	0x08004385
 80043c0:	08004385 	.word	0x08004385
 80043c4:	08004385 	.word	0x08004385
 80043c8:	08004507 	.word	0x08004507
 80043cc:	08004433 	.word	0x08004433
 80043d0:	080044c1 	.word	0x080044c1
 80043d4:	08004385 	.word	0x08004385
 80043d8:	08004385 	.word	0x08004385
 80043dc:	08004529 	.word	0x08004529
 80043e0:	08004385 	.word	0x08004385
 80043e4:	08004433 	.word	0x08004433
 80043e8:	08004385 	.word	0x08004385
 80043ec:	08004385 	.word	0x08004385
 80043f0:	080044c9 	.word	0x080044c9
 80043f4:	6833      	ldr	r3, [r6, #0]
 80043f6:	1d1a      	adds	r2, r3, #4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6032      	str	r2, [r6, #0]
 80043fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004400:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004404:	2301      	movs	r3, #1
 8004406:	e09c      	b.n	8004542 <_printf_i+0x1e6>
 8004408:	6833      	ldr	r3, [r6, #0]
 800440a:	6820      	ldr	r0, [r4, #0]
 800440c:	1d19      	adds	r1, r3, #4
 800440e:	6031      	str	r1, [r6, #0]
 8004410:	0606      	lsls	r6, r0, #24
 8004412:	d501      	bpl.n	8004418 <_printf_i+0xbc>
 8004414:	681d      	ldr	r5, [r3, #0]
 8004416:	e003      	b.n	8004420 <_printf_i+0xc4>
 8004418:	0645      	lsls	r5, r0, #25
 800441a:	d5fb      	bpl.n	8004414 <_printf_i+0xb8>
 800441c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004420:	2d00      	cmp	r5, #0
 8004422:	da03      	bge.n	800442c <_printf_i+0xd0>
 8004424:	232d      	movs	r3, #45	@ 0x2d
 8004426:	426d      	negs	r5, r5
 8004428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800442c:	4858      	ldr	r0, [pc, #352]	@ (8004590 <_printf_i+0x234>)
 800442e:	230a      	movs	r3, #10
 8004430:	e011      	b.n	8004456 <_printf_i+0xfa>
 8004432:	6821      	ldr	r1, [r4, #0]
 8004434:	6833      	ldr	r3, [r6, #0]
 8004436:	0608      	lsls	r0, r1, #24
 8004438:	f853 5b04 	ldr.w	r5, [r3], #4
 800443c:	d402      	bmi.n	8004444 <_printf_i+0xe8>
 800443e:	0649      	lsls	r1, r1, #25
 8004440:	bf48      	it	mi
 8004442:	b2ad      	uxthmi	r5, r5
 8004444:	2f6f      	cmp	r7, #111	@ 0x6f
 8004446:	4852      	ldr	r0, [pc, #328]	@ (8004590 <_printf_i+0x234>)
 8004448:	6033      	str	r3, [r6, #0]
 800444a:	bf14      	ite	ne
 800444c:	230a      	movne	r3, #10
 800444e:	2308      	moveq	r3, #8
 8004450:	2100      	movs	r1, #0
 8004452:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004456:	6866      	ldr	r6, [r4, #4]
 8004458:	60a6      	str	r6, [r4, #8]
 800445a:	2e00      	cmp	r6, #0
 800445c:	db05      	blt.n	800446a <_printf_i+0x10e>
 800445e:	6821      	ldr	r1, [r4, #0]
 8004460:	432e      	orrs	r6, r5
 8004462:	f021 0104 	bic.w	r1, r1, #4
 8004466:	6021      	str	r1, [r4, #0]
 8004468:	d04b      	beq.n	8004502 <_printf_i+0x1a6>
 800446a:	4616      	mov	r6, r2
 800446c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004470:	fb03 5711 	mls	r7, r3, r1, r5
 8004474:	5dc7      	ldrb	r7, [r0, r7]
 8004476:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800447a:	462f      	mov	r7, r5
 800447c:	42bb      	cmp	r3, r7
 800447e:	460d      	mov	r5, r1
 8004480:	d9f4      	bls.n	800446c <_printf_i+0x110>
 8004482:	2b08      	cmp	r3, #8
 8004484:	d10b      	bne.n	800449e <_printf_i+0x142>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	07df      	lsls	r7, r3, #31
 800448a:	d508      	bpl.n	800449e <_printf_i+0x142>
 800448c:	6923      	ldr	r3, [r4, #16]
 800448e:	6861      	ldr	r1, [r4, #4]
 8004490:	4299      	cmp	r1, r3
 8004492:	bfde      	ittt	le
 8004494:	2330      	movle	r3, #48	@ 0x30
 8004496:	f806 3c01 	strble.w	r3, [r6, #-1]
 800449a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800449e:	1b92      	subs	r2, r2, r6
 80044a0:	6122      	str	r2, [r4, #16]
 80044a2:	f8cd a000 	str.w	sl, [sp]
 80044a6:	464b      	mov	r3, r9
 80044a8:	aa03      	add	r2, sp, #12
 80044aa:	4621      	mov	r1, r4
 80044ac:	4640      	mov	r0, r8
 80044ae:	f7ff fee7 	bl	8004280 <_printf_common>
 80044b2:	3001      	adds	r0, #1
 80044b4:	d14a      	bne.n	800454c <_printf_i+0x1f0>
 80044b6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ba:	b004      	add	sp, #16
 80044bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	f043 0320 	orr.w	r3, r3, #32
 80044c6:	6023      	str	r3, [r4, #0]
 80044c8:	4832      	ldr	r0, [pc, #200]	@ (8004594 <_printf_i+0x238>)
 80044ca:	2778      	movs	r7, #120	@ 0x78
 80044cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	6831      	ldr	r1, [r6, #0]
 80044d4:	061f      	lsls	r7, r3, #24
 80044d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80044da:	d402      	bmi.n	80044e2 <_printf_i+0x186>
 80044dc:	065f      	lsls	r7, r3, #25
 80044de:	bf48      	it	mi
 80044e0:	b2ad      	uxthmi	r5, r5
 80044e2:	6031      	str	r1, [r6, #0]
 80044e4:	07d9      	lsls	r1, r3, #31
 80044e6:	bf44      	itt	mi
 80044e8:	f043 0320 	orrmi.w	r3, r3, #32
 80044ec:	6023      	strmi	r3, [r4, #0]
 80044ee:	b11d      	cbz	r5, 80044f8 <_printf_i+0x19c>
 80044f0:	2310      	movs	r3, #16
 80044f2:	e7ad      	b.n	8004450 <_printf_i+0xf4>
 80044f4:	4826      	ldr	r0, [pc, #152]	@ (8004590 <_printf_i+0x234>)
 80044f6:	e7e9      	b.n	80044cc <_printf_i+0x170>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	f023 0320 	bic.w	r3, r3, #32
 80044fe:	6023      	str	r3, [r4, #0]
 8004500:	e7f6      	b.n	80044f0 <_printf_i+0x194>
 8004502:	4616      	mov	r6, r2
 8004504:	e7bd      	b.n	8004482 <_printf_i+0x126>
 8004506:	6833      	ldr	r3, [r6, #0]
 8004508:	6825      	ldr	r5, [r4, #0]
 800450a:	6961      	ldr	r1, [r4, #20]
 800450c:	1d18      	adds	r0, r3, #4
 800450e:	6030      	str	r0, [r6, #0]
 8004510:	062e      	lsls	r6, r5, #24
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	d501      	bpl.n	800451a <_printf_i+0x1be>
 8004516:	6019      	str	r1, [r3, #0]
 8004518:	e002      	b.n	8004520 <_printf_i+0x1c4>
 800451a:	0668      	lsls	r0, r5, #25
 800451c:	d5fb      	bpl.n	8004516 <_printf_i+0x1ba>
 800451e:	8019      	strh	r1, [r3, #0]
 8004520:	2300      	movs	r3, #0
 8004522:	6123      	str	r3, [r4, #16]
 8004524:	4616      	mov	r6, r2
 8004526:	e7bc      	b.n	80044a2 <_printf_i+0x146>
 8004528:	6833      	ldr	r3, [r6, #0]
 800452a:	1d1a      	adds	r2, r3, #4
 800452c:	6032      	str	r2, [r6, #0]
 800452e:	681e      	ldr	r6, [r3, #0]
 8004530:	6862      	ldr	r2, [r4, #4]
 8004532:	2100      	movs	r1, #0
 8004534:	4630      	mov	r0, r6
 8004536:	f7fb fe73 	bl	8000220 <memchr>
 800453a:	b108      	cbz	r0, 8004540 <_printf_i+0x1e4>
 800453c:	1b80      	subs	r0, r0, r6
 800453e:	6060      	str	r0, [r4, #4]
 8004540:	6863      	ldr	r3, [r4, #4]
 8004542:	6123      	str	r3, [r4, #16]
 8004544:	2300      	movs	r3, #0
 8004546:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800454a:	e7aa      	b.n	80044a2 <_printf_i+0x146>
 800454c:	6923      	ldr	r3, [r4, #16]
 800454e:	4632      	mov	r2, r6
 8004550:	4649      	mov	r1, r9
 8004552:	4640      	mov	r0, r8
 8004554:	47d0      	blx	sl
 8004556:	3001      	adds	r0, #1
 8004558:	d0ad      	beq.n	80044b6 <_printf_i+0x15a>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	079b      	lsls	r3, r3, #30
 800455e:	d413      	bmi.n	8004588 <_printf_i+0x22c>
 8004560:	68e0      	ldr	r0, [r4, #12]
 8004562:	9b03      	ldr	r3, [sp, #12]
 8004564:	4298      	cmp	r0, r3
 8004566:	bfb8      	it	lt
 8004568:	4618      	movlt	r0, r3
 800456a:	e7a6      	b.n	80044ba <_printf_i+0x15e>
 800456c:	2301      	movs	r3, #1
 800456e:	4632      	mov	r2, r6
 8004570:	4649      	mov	r1, r9
 8004572:	4640      	mov	r0, r8
 8004574:	47d0      	blx	sl
 8004576:	3001      	adds	r0, #1
 8004578:	d09d      	beq.n	80044b6 <_printf_i+0x15a>
 800457a:	3501      	adds	r5, #1
 800457c:	68e3      	ldr	r3, [r4, #12]
 800457e:	9903      	ldr	r1, [sp, #12]
 8004580:	1a5b      	subs	r3, r3, r1
 8004582:	42ab      	cmp	r3, r5
 8004584:	dcf2      	bgt.n	800456c <_printf_i+0x210>
 8004586:	e7eb      	b.n	8004560 <_printf_i+0x204>
 8004588:	2500      	movs	r5, #0
 800458a:	f104 0619 	add.w	r6, r4, #25
 800458e:	e7f5      	b.n	800457c <_printf_i+0x220>
 8004590:	080046d9 	.word	0x080046d9
 8004594:	080046ea 	.word	0x080046ea

08004598 <memmove>:
 8004598:	4288      	cmp	r0, r1
 800459a:	b510      	push	{r4, lr}
 800459c:	eb01 0402 	add.w	r4, r1, r2
 80045a0:	d902      	bls.n	80045a8 <memmove+0x10>
 80045a2:	4284      	cmp	r4, r0
 80045a4:	4623      	mov	r3, r4
 80045a6:	d807      	bhi.n	80045b8 <memmove+0x20>
 80045a8:	1e43      	subs	r3, r0, #1
 80045aa:	42a1      	cmp	r1, r4
 80045ac:	d008      	beq.n	80045c0 <memmove+0x28>
 80045ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045b6:	e7f8      	b.n	80045aa <memmove+0x12>
 80045b8:	4402      	add	r2, r0
 80045ba:	4601      	mov	r1, r0
 80045bc:	428a      	cmp	r2, r1
 80045be:	d100      	bne.n	80045c2 <memmove+0x2a>
 80045c0:	bd10      	pop	{r4, pc}
 80045c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045ca:	e7f7      	b.n	80045bc <memmove+0x24>

080045cc <_sbrk_r>:
 80045cc:	b538      	push	{r3, r4, r5, lr}
 80045ce:	4d06      	ldr	r5, [pc, #24]	@ (80045e8 <_sbrk_r+0x1c>)
 80045d0:	2300      	movs	r3, #0
 80045d2:	4604      	mov	r4, r0
 80045d4:	4608      	mov	r0, r1
 80045d6:	602b      	str	r3, [r5, #0]
 80045d8:	f7fc fe0e 	bl	80011f8 <_sbrk>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d102      	bne.n	80045e6 <_sbrk_r+0x1a>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	b103      	cbz	r3, 80045e6 <_sbrk_r+0x1a>
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	20000254 	.word	0x20000254

080045ec <memcpy>:
 80045ec:	440a      	add	r2, r1
 80045ee:	4291      	cmp	r1, r2
 80045f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80045f4:	d100      	bne.n	80045f8 <memcpy+0xc>
 80045f6:	4770      	bx	lr
 80045f8:	b510      	push	{r4, lr}
 80045fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004602:	4291      	cmp	r1, r2
 8004604:	d1f9      	bne.n	80045fa <memcpy+0xe>
 8004606:	bd10      	pop	{r4, pc}

08004608 <_realloc_r>:
 8004608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800460c:	4607      	mov	r7, r0
 800460e:	4614      	mov	r4, r2
 8004610:	460d      	mov	r5, r1
 8004612:	b921      	cbnz	r1, 800461e <_realloc_r+0x16>
 8004614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004618:	4611      	mov	r1, r2
 800461a:	f7ff bc4d 	b.w	8003eb8 <_malloc_r>
 800461e:	b92a      	cbnz	r2, 800462c <_realloc_r+0x24>
 8004620:	f7ff fbde 	bl	8003de0 <_free_r>
 8004624:	4625      	mov	r5, r4
 8004626:	4628      	mov	r0, r5
 8004628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800462c:	f000 f81a 	bl	8004664 <_malloc_usable_size_r>
 8004630:	4284      	cmp	r4, r0
 8004632:	4606      	mov	r6, r0
 8004634:	d802      	bhi.n	800463c <_realloc_r+0x34>
 8004636:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800463a:	d8f4      	bhi.n	8004626 <_realloc_r+0x1e>
 800463c:	4621      	mov	r1, r4
 800463e:	4638      	mov	r0, r7
 8004640:	f7ff fc3a 	bl	8003eb8 <_malloc_r>
 8004644:	4680      	mov	r8, r0
 8004646:	b908      	cbnz	r0, 800464c <_realloc_r+0x44>
 8004648:	4645      	mov	r5, r8
 800464a:	e7ec      	b.n	8004626 <_realloc_r+0x1e>
 800464c:	42b4      	cmp	r4, r6
 800464e:	4622      	mov	r2, r4
 8004650:	4629      	mov	r1, r5
 8004652:	bf28      	it	cs
 8004654:	4632      	movcs	r2, r6
 8004656:	f7ff ffc9 	bl	80045ec <memcpy>
 800465a:	4629      	mov	r1, r5
 800465c:	4638      	mov	r0, r7
 800465e:	f7ff fbbf 	bl	8003de0 <_free_r>
 8004662:	e7f1      	b.n	8004648 <_realloc_r+0x40>

08004664 <_malloc_usable_size_r>:
 8004664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004668:	1f18      	subs	r0, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	bfbc      	itt	lt
 800466e:	580b      	ldrlt	r3, [r1, r0]
 8004670:	18c0      	addlt	r0, r0, r3
 8004672:	4770      	bx	lr

08004674 <_init>:
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	bf00      	nop
 8004678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467a:	bc08      	pop	{r3}
 800467c:	469e      	mov	lr, r3
 800467e:	4770      	bx	lr

08004680 <_fini>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr
